webpackJsonp([22673912168828],{461:function(n,a){n.exports={data:{markdownRemark:{html:'<p>这几天看了一些开源代码自己重新写了一下表单组件，然后现在想加异步验证组件进来。</p>\n<p>异步验证是表单验证中比较重要的一个功能点，如从服务器获取用户名是否已经被注册等都可以通过一个异步验证模块来处理。</p>\n<p>如何制作一个异步验证模块呢，一开始我并没有什么头绪，开始想着使用 <code class="language-text">Promise</code> 来进行模块的制作，但是对 <code class="language-text">Promise</code> 的使用还是不够自如。然后就看了 <code class="language-text">Ant.Design</code> 中使用的异步验证模块 —— <code class="language-text">async-validator</code>，根据其思路实现了异步验证。在实现了异步验证模块之后，我们可以直接使用其替代原来的验证模块。</p>\n<p>先说说异步验证可以带来的功能，以检查用户名为例子，该字段的规则是，用户名由 5 - 20 位字母数字或下划线组成，用户名不能已经被注册，该字段必须是要提供的。</p>\n<p>当我们在该字段进行输入的时候，字段会显示正在验证，等到验证结束之后，显示该字段是否验证成功。</p>\n<p>这篇文章就以 <a href="https://github.com/yiminghe/async-validator">async-validator</a> 为例子，来说明该异步验证模块是怎么工作的。</p>\n<!-- more -->\n<p>相信大家在 <code class="language-text">JavaScript</code> 中，会频繁地接触到与异步相关的编程，说到异步，自然而然就会想到回调函数， <a href="https://github.com/yiminghe/async-validator">async-validator</a> 也是使用回调来处理异步的事情。</p>\n<h2>呈现的接口</h2>\n<p>让我们先来看看该模块给外部提供的接口</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Schema</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 构造函数</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nSchema<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">message</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">// 获取提示信息(如：该字段为必填字段)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nSchema<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">define</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 对 rules 做一定的处理</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nSchema<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">validate</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>source_<span class="token punctuation">,</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> oc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 进行验证操作</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>其中，message 和 define 方法由 validate 进行调用，所以最终使用该模块的人一般为这样使用：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>\nvalidator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  user<span class="token punctuation">:</span> <span class="token string">\'zhuscat\'</span><span class="token punctuation">,</span>\n  password<span class="token punctuation">:</span> <span class="token string">\'123456\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span>errors<span class="token punctuation">,</span> fileds<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something here...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>我们只需要知道 <code class="language-text">message</code> 方法是返回一个可以获取各种提示信息的对象，<code class="language-text">define</code> 方法是对 <code class="language-text">rules</code> 做一定的处理的函数。</p>\n<p>这里有必要解释一下 <code class="language-text">rules</code> 的形式：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">/**\n * rules 为一个对象，其描述了验证的一些规则\n * 对象的键指明其所对应的字段的名称\n * 然后验证模块会解析这些规则以提供验证\n * 如下面定义的规则\n * user 字段所对应的规则为 userRule\n * userRule 由一个数组组成，每个数组都是一条验证的规则\n * userRule[0]:\n * 要求类型为 string, 为必填字段，最小长度为5，最大长度为10\n * userRule[1]:\n * 一个自定义的异步验证，在 1s 后返回错误，"超时错误"\n * 你可能会问：为什么不直接把 validator 写到 userRule[0] 里面\n * 原因是像 type, required 之类的字段是预先定义好的\n * userRule[0] 最终会转换成一个具有 validator 成员的对象\n * async-validator 的做法是，如果一个对象中有 validator\n * 则直接返回 validator\n * 最后验证字段的时候，只是调用每一个 validator\n *\n */</span>\n<span class="token keyword">const</span> userRule <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    min<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    max<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    validator<span class="token punctuation">:</span> <span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> source<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">\'超时错误\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> passwordRule <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    type<span class="token punctuation">:</span> <span class="token string">\'string\'</span><span class="token punctuation">,</span>\n    required<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    min<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n    max<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> rules <span class="token operator">=</span> <span class="token punctuation">{</span>\n  user<span class="token punctuation">:</span> userRule<span class="token punctuation">,</span>\n  password<span class="token punctuation">:</span> passwordRule<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>好了，知道了 <code class="language-text">rules</code> 的形式之后，是不是对该验证模块是如何验证心里是不是有一个想法了呢？</p>\n<p>在生成了新的 <code class="language-text">Schema</code> 实例之后，通过调用 <code class="language-text">validate</code> 函数就能进行验证了，之后我们在 <code class="language-text">callback</code> 中取得错误。</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// callback 的形式</span>\n<span class="token punctuation">(</span>errors<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>其中， errors 是所有验证错误信息，fields 是对应于每一个字段的错误，如以上面的例子，可能返回的就是：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> errors <span class="token operator">=</span> <span class="token punctuation">[</span>error1<span class="token punctuation">,</span> error2<span class="token punctuation">,</span> error3<span class="token punctuation">,</span> error4<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> fields <span class="token operator">=</span> <span class="token punctuation">{</span>\n  user<span class="token punctuation">:</span> <span class="token punctuation">[</span>error1<span class="token punctuation">,</span> error2<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  password<span class="token punctuation">:</span> <span class="token punctuation">[</span>error3<span class="token punctuation">,</span> error4<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<h2>验证过程</h2>\n<p>好了，讲完大概的用法之后，我们就要思考，如何实现。</p>\n<p>其过程是这样的（做了一定的简化，如关于 message 的逻辑，如一些特殊情况的处理）</p>\n<h3>创建实例</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> validator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span></code></pre>\n      </div>\n<p>首先根据 <code class="language-text">rules</code>，将其进行一定的转换，放到 <code class="language-text">validator.rules</code> 上面。</p>\n<h3>进行验证</h3>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript">validator<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  user<span class="token punctuation">:</span> <span class="token string">\'zhuscat\'</span><span class="token punctuation">,</span>\n  password<span class="token punctuation">:</span> <span class="token string">\'123456\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> <span class="token punctuation">(</span>errors<span class="token punctuation">,</span> fileds<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something here...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>我们要进行的验证字段是 user 跟 password，关于规则可以看上面的内容，首先，模块会对 <code class="language-text">validator.rules</code> 进行一个处理，使所有规则都具有一个 <code class="language-text">validator</code> 字段，<code class="language-text">validator</code> 字段要求是一个形式如下的函数：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> value<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> source<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>当 callback 被调用的时候，说明这条规则验证结束。</p>\n<p>接着，对信息做如下的处理</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// series = {};</span>\n<span class="token comment">// for every key in source(这里是\'user\', \'password\')</span>\n<span class="token comment">//   arr &lt;- this.rules[key]</span>\n<span class="token comment">//   for every item in arr</span>\n<span class="token comment">//     series[key].push({value, rule, source, filed: key})</span></code></pre>\n      </div>\n<p>这样一来，会得到一个如下的 <code class="language-text">series</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> series <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">\'user\'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      value<span class="token punctuation">:</span> <span class="token string">\'zhuscat\'</span><span class="token punctuation">,</span>\n      rule<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 带有 validator</span>\n      source<span class="token punctuation">:</span> <span class="token punctuation">{</span>user<span class="token punctuation">:</span> <span class="token string">\'zhuscat\'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">\'123456\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      field<span class="token punctuation">:</span> <span class="token string">\'user\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      value<span class="token punctuation">:</span> <span class="token string">\'zhuscat\'</span><span class="token punctuation">,</span>\n      rule<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      source<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      field<span class="token punctuation">:</span> <span class="token string">\'user\'</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token string">\'password\'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      value<span class="token punctuation">:</span> <span class="token string">\'123456\'</span><span class="token punctuation">,</span>\n      rule<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      source<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n      filed<span class="token punctuation">:</span> <span class="token string">\'password\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>\n      </div>\n<p>接下来就是最关键的一步，我认为这就是该异步验证的核心，也就是一个函数: <code class="language-text">asyncMap</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">asyncMap</span><span class="token punctuation">(</span>objArr<span class="token punctuation">,</span> option<span class="token punctuation">,</span> func<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>生成的 <code class="language-text">series</code> 会传递给 asyncMap, 调用形式如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token function">asyncMap</span><span class="token punctuation">(</span>series<span class="token punctuation">,</span> option<span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> doIt<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">//...</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>results<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">complete</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>\n      </div>\n<p><code class="language-text">asyncMap</code> 会根据提供的 option 来进行不同的验证策略，如进行所有规则的验证，或者当出现一个错误立即停止验证。验证结束之后就会调用 <code class="language-text">callback</code>，<code class="language-text">results</code> 就是相关的错误信息。</p>\n<p><code class="language-text">func</code> 参数对 <code class="language-text">series</code> 中的一条规则进行验证时调用，data 就是如下面的对象：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>\n  value<span class="token punctuation">:</span> <span class="token string">\'zhuscat\'</span><span class="token punctuation">,</span>\n  rule<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 带有 validator</span>\n  source<span class="token punctuation">:</span> <span class="token punctuation">{</span>user<span class="token punctuation">:</span> <span class="token string">\'zhuscat\'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">\'123456\'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n  field<span class="token punctuation">:</span> <span class="token string">\'user\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>在 <code class="language-text">func</code> 中，会调用 <code class="language-text">rule.validator</code> 进行验证，在 <code class="language-text">rule.validator</code> 验证后，调用 <code class="language-text">doIt</code>，并传入相应的错误。</p>\n<p>关于这个 <code class="language-text">doIt</code> 函数，则决定了验证的策略。</p>\n<p><code class="language-text">asyncMap</code> 主要通过调用两个不同的函数实现不同的验证策略，一个叫做 <code class="language-text">asyncParallelArray(arr, func, callback)</code>，一个叫做 <code class="language-text">asyncSerialArray(arr, func, callback)</code></p>\n<p><code class="language-text">syncParallelArray</code> 验证 arr 中的所有规则结束后调用 <code class="language-text">callback</code>， <code class="language-text">asyncSerialArray</code> 为当出现一个错误的时候，就调用 <code class="language-text">callback</code>，让我们来看看这两个函数的实现：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">asyncParallelArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> func<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> arrLength <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token comment">/*\n    count 也就是刚才的 doIt\n    当被调用后，增加 total 的值，当 total 与数组总数\n    相同的时候，调用 callback\n  */</span>\n  <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    results<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    total<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">===</span> arrLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">asyncSerialArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> func<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> arrLength <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token comment">/*\n    next 也就是刚才的 doIt\n    当被调用的时候，查看是否存在 errors 如果存在\n    调用 callback\n  */</span>\n  <span class="token keyword">function</span> <span class="token function">next</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>errors <span class="token operator">&amp;&amp;</span> errors<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span>errors<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> original <span class="token operator">=</span> index<span class="token punctuation">;</span>\n    index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>original <span class="token operator">&lt;</span> arrLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">func</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>original<span class="token punctuation">]</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>再看看 <code class="language-text">asyncMap</code> 的函数实现：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">asyncMap</span><span class="token punctuation">(</span>objArr<span class="token punctuation">,</span> option<span class="token punctuation">,</span> func<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>option<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> flattenArr <span class="token operator">=</span> <span class="token function">flattenObjArr</span><span class="token punctuation">(</span>objArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">asyncSerialArray</span><span class="token punctuation">(</span>flattenArr<span class="token punctuation">,</span> func<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> firstFields <span class="token operator">=</span> option<span class="token punctuation">.</span>firstFields <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>firstFields <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    firstFields <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> objArrKeys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>objArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> objArrLength <span class="token operator">=</span> objArrKeys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span>errors<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    results<span class="token punctuation">.</span>push<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>results<span class="token punctuation">,</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    total<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">===</span> objArrLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">callback</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  objArrKeys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> arr <span class="token operator">=</span> objArr<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstFields<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">asyncSerialArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> func<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">asyncParallelArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> func<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>当 <code class="language-text">option.first</code> 为 <code class="language-text">true</code> 的时候（只验证到第一个错误），将 <code class="language-text">series</code> 做 <code class="language-text">flattenArray</code> 的处理：</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code class="language-javascript"><span class="token comment">// 类似与这样的处理</span>\n<span class="token comment">// array = [[1, 2], [3, 4]]</span>\n<span class="token comment">// flattenArray = [1, 2, 3, 4]</span></code></pre>\n      </div>\n<p>接着调用 <code class="language-text">asyncSerialArray</code> 进行处理</p>\n<p>当 <code class="language-text">option.firstField</code> 为 <code class="language-text">true</code> 的时候，对每一个字段（这里是 <code class="language-text">user</code> 和 <code class="language-text">password</code> )中的数组使用 <code class="language-text">asyncSerialArray</code> 处理，如果没有这些配置，则对每一个字段进行 <code class="language-text">asyncParallelArray</code> 处理。</p>\n<p><code class="language-text">next</code> 函数作为 <code class="language-text">asyncParallelArray</code> 和 <code class="language-text">asyncSerialArray</code>，当调用的时候证明一个验证结束，通过改变 <code class="language-text">total</code> 来看是否所有验证已经结束，结束后调用 <code class="language-text">callback</code>。</p>\n<p>这就是一个异步验证组件。</p>\n<h2>参考资料</h2>\n<ol>\n<li><a href="https://github.com/yiminghe/async-validator">async-validator</a></li>\n</ol>',
frontmatter:{title:"JavaScript 异步验证",date:"September 26, 2016",tags:["JavaScript","验证","前端"]},fields:{slug:"/async-validator/"}}},pathContext:{slug:"/async-validator/"}}}});
//# sourceMappingURL=path---posts-async-validator-8493774407a45df9455e.js.map