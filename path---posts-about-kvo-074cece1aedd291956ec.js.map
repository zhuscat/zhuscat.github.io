{"version":3,"sources":["webpack:///path---posts-about-kvo-074cece1aedd291956ec.js","webpack:///./.cache/json/posts-about-kvo.json"],"names":["webpackJsonp","463","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,q8FAA88FC,aAA6CC,MAAA,SAAAC,KAAA,iBAAAC,MAAA,iCAAiFC,QAAWC,KAAA,iBAAuBC,aAAgBD,KAAA","file":"path---posts-about-kvo-074cece1aedd291956ec.js","sourcesContent":["webpackJsonp([22303147726020],{\n\n/***/ 463:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>KVO 相关知识</p>\\n<!-- more -->\\n<h2>自动通知</h2>\\n<p>系统默认是自动通知</p>\\n<p>在 Swift 中，需要确保观察者和被观察者都是NSObject的子类。\\n并且，被观察的属性前面要加上 <code class=\\\"language-text\\\">dynamic</code> 关键字。</p>\\n<p>如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">class Object: NSObject {\\n    dynamic var propertyOne: String = &quot;property&quot;\\n    dynamic var propertyTwo: Int = 0\\n}</code></pre>\\n      </div>\\n<p>然后就可以为这个类的实例添加观察者了。比如我添加一个控制器为其观察者。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">class ViewController: UIViewController {\\n\\n    var object = Object()\\n\\n    override func viewDidLoad() {\\n        super.viewDidLoad()\\n        object.addObserver(self, forKeyPath: &quot;propertyOne&quot;, options: NSKeyValueObservingOptions.New, context: nil)\\n        object.addObserver(self, forKeyPath: &quot;propertyTwo&quot;, options: NSKeyValueObservingOptions.New, context: nil)\\n    }\\n\\n    override func observeValueForKeyPath(keyPath: String?, ofObject object: AnyObject?, change: [String : AnyObject]?, context: UnsafeMutablePointer&lt;Void&gt;) {\\n        if keyPath == &quot;propertyOne&quot; {\\n            print(&quot;propertyOne:\\\\(change![NSKeyValueChangeNewKey] as! String)&quot;)\\n        } else if keyPath == &quot;propertyTwo&quot; {\\n            print(&quot;propertyTwo:\\\\(change![NSKeyValueChangeNewKey] as! Int)&quot;)\\n        } else {\\n            super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)\\n        }\\n    }\\n\\n    deinit {\\n        self.removeObserver(self, forKeyPath: &quot;propertyOne&quot;)\\n        self.removeObserver(self, forKeyPath: &quot;propertyTwo&quot;)\\n    }\\n\\n    override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) {\\n        object.propertyOne = &quot;propertyChange&quot;\\n        object.propertyTwo = 2\\n    }\\n}</code></pre>\\n      </div>\\n<p>如此在点击屏幕的时候可以看到输出。</p>\\n<p>注意，需要在适当的时机移除观察者，否则即使控制器销毁了，通知仍然会发出，此时程序会崩溃。</p>\\n<h2>手动通知</h2>\\n<p>可以将某属性设置为不自动通知，在 Object 类中增加：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">override class func automaticallyNotifiesObserversForKey(key: String) -&gt; Bool {\\n    if key == &quot;propertyOne&quot; {\\n        return false\\n    } else {\\n        return super.automaticallyNotifiesObserversForKey(key)\\n    }\\n}</code></pre>\\n      </div>\\n<p>这样就不会在 <code class=\\\"language-text\\\">propertyOne</code> 改变的时候自动通知了。</p>\\n<p>手动通知的要点是两个方法：</p>\\n<ol>\\n<li><code class=\\\"language-text\\\">func willChangeValueForKey(key: String)</code></li>\\n<li><code class=\\\"language-text\\\">func didChangeValueForKey(key: String)</code></li>\\n</ol>\\n<p>在想要通知的时候写如下代码就行了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">object.willChangeValueForKey(&quot;propertyOne&quot;)\\nobject.propertyOne = &quot;propertyChange&quot;\\nobject.didChangeValueForKey(&quot;propertyOne&quot;)</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"KVO 知识\",\"date\":\"April 10, 2016\",\"tags\":[\"学习笔记\",\"技术\",\"开发\",\"Swift\",\"iOS\"]},\"fields\":{\"slug\":\"/about-kvo/\"}}},\"pathContext\":{\"slug\":\"/about-kvo/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-about-kvo-074cece1aedd291956ec.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>KVO 相关知识</p>\\n<!-- more -->\\n<h2>自动通知</h2>\\n<p>系统默认是自动通知</p>\\n<p>在 Swift 中，需要确保观察者和被观察者都是NSObject的子类。\\n并且，被观察的属性前面要加上 <code class=\\\"language-text\\\">dynamic</code> 关键字。</p>\\n<p>如下代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">class Object: NSObject {\\n    dynamic var propertyOne: String = &quot;property&quot;\\n    dynamic var propertyTwo: Int = 0\\n}</code></pre>\\n      </div>\\n<p>然后就可以为这个类的实例添加观察者了。比如我添加一个控制器为其观察者。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">class ViewController: UIViewController {\\n\\n    var object = Object()\\n\\n    override func viewDidLoad() {\\n        super.viewDidLoad()\\n        object.addObserver(self, forKeyPath: &quot;propertyOne&quot;, options: NSKeyValueObservingOptions.New, context: nil)\\n        object.addObserver(self, forKeyPath: &quot;propertyTwo&quot;, options: NSKeyValueObservingOptions.New, context: nil)\\n    }\\n\\n    override func observeValueForKeyPath(keyPath: String?, ofObject object: AnyObject?, change: [String : AnyObject]?, context: UnsafeMutablePointer&lt;Void&gt;) {\\n        if keyPath == &quot;propertyOne&quot; {\\n            print(&quot;propertyOne:\\\\(change![NSKeyValueChangeNewKey] as! String)&quot;)\\n        } else if keyPath == &quot;propertyTwo&quot; {\\n            print(&quot;propertyTwo:\\\\(change![NSKeyValueChangeNewKey] as! Int)&quot;)\\n        } else {\\n            super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)\\n        }\\n    }\\n\\n    deinit {\\n        self.removeObserver(self, forKeyPath: &quot;propertyOne&quot;)\\n        self.removeObserver(self, forKeyPath: &quot;propertyTwo&quot;)\\n    }\\n\\n    override func touchesBegan(touches: Set&lt;UITouch&gt;, withEvent event: UIEvent?) {\\n        object.propertyOne = &quot;propertyChange&quot;\\n        object.propertyTwo = 2\\n    }\\n}</code></pre>\\n      </div>\\n<p>如此在点击屏幕的时候可以看到输出。</p>\\n<p>注意，需要在适当的时机移除观察者，否则即使控制器销毁了，通知仍然会发出，此时程序会崩溃。</p>\\n<h2>手动通知</h2>\\n<p>可以将某属性设置为不自动通知，在 Object 类中增加：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">override class func automaticallyNotifiesObserversForKey(key: String) -&gt; Bool {\\n    if key == &quot;propertyOne&quot; {\\n        return false\\n    } else {\\n        return super.automaticallyNotifiesObserversForKey(key)\\n    }\\n}</code></pre>\\n      </div>\\n<p>这样就不会在 <code class=\\\"language-text\\\">propertyOne</code> 改变的时候自动通知了。</p>\\n<p>手动通知的要点是两个方法：</p>\\n<ol>\\n<li><code class=\\\"language-text\\\">func willChangeValueForKey(key: String)</code></li>\\n<li><code class=\\\"language-text\\\">func didChangeValueForKey(key: String)</code></li>\\n</ol>\\n<p>在想要通知的时候写如下代码就行了：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">object.willChangeValueForKey(&quot;propertyOne&quot;)\\nobject.propertyOne = &quot;propertyChange&quot;\\nobject.didChangeValueForKey(&quot;propertyOne&quot;)</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"KVO 知识\",\"date\":\"April 10, 2016\",\"tags\":[\"学习笔记\",\"技术\",\"开发\",\"Swift\",\"iOS\"]},\"fields\":{\"slug\":\"/about-kvo/\"}}},\"pathContext\":{\"slug\":\"/about-kvo/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-about-kvo.json\n// module id = 463\n// module chunks = 22303147726020"],"sourceRoot":""}