webpackJsonp([0x81b8806e4260],{460:function(e,t){e.exports={pathContext:{group:[{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/typescript-rootdirs.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{title:"TypeScript rootDirs 是怎么工作的",date:"Jun 08, 2018",tags:["TypeScript","配置"]},fields:{slug:"/typescript-rootdirs/"},excerpt:"在 TypeScript 中可以利用 rootDirs 指定虚拟目录，若不了解，可以阅读 Module Resolution · TypeScript…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/about-promise-prototype-finally.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{title:"About Promise.prototype.finally",date:"Mar 04, 2018",tags:["前端","JavaScript"]},fields:{slug:"/about-promise-prototype-finally/"},excerpt:"今天随意浏览，发现   已经进入到   了，顺便记录一下规范中   的一些注意点吧。 使用方法 注意点 1、   中的回调函数不接受任何参数…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/about-front-end-error.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{title:"前端错误小知识",date:"Nov 03, 2017",tags:["前端","JavaScript"]},fields:{slug:"/about-front-end-error/"},excerpt:"window.onerror  是顶层的错误处理函数，大部分抛出的未被处理的错误可以在这里进行统一处理。如下所示： 另外，如果在函数中   的话，错误不会继续向上抛出，也就是不会再浏览器控制台出现   这些提示。 当然，  不是万能灵药，有如下限制： Promise…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/https-proxy-on-ios.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{title:"使用 Whistle 对 iOS HTTPS 进行抓包",date:"Sep 20, 2017",tags:["抓包","网络","Web"]},fields:{slug:"/https-proxy-on-ios/"},excerpt:"Whistle  是一款 Web Debugging Proxy，类似的工具还有 Fiddler，Charles。不过，Fiddler 在 macOS 上不尽完美（我没有开启成功过，不知道什么情况），Charles 则是收费的。而 Fiddler…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/user-and-group-in-linux.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{title:"Linux 用户管理（一）",date:"Sep 18, 2017",tags:["Linux"]},fields:{slug:"/user-and-group-in-linux/"},excerpt:"讲讲 Linux…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/reactive-data.md absPath of file >>> MarkdownRemark",timeToRead:3,frontmatter:{title:"Reactivity",date:"Sep 08, 2017",tags:["JavaScript","前端"]},fields:{slug:"/reactive-data/"},excerpt:"最近有被问到 Vue…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/shell-script-basic.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{title:"Shell Script 基本语法",date:"Aug 27, 2017",tags:["shell script","linux","unix"]},fields:{slug:"/shell-script-basic/"},excerpt:"假定大家是有编程基础以及使用 bash 的命令行的经验，因此只是简单的列举一下语法以及需要注意的地方。 注释 注释使用   号，如 第一个简单的 script…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/thoughts-on-styled-components.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{title:"Thoughts on Styled Components",date:"Jul 18, 2017",tags:["前端","React","CSS","Styled Components","CSS in JS"]},fields:{slug:"/thoughts-on-styled-components/"},excerpt:"随着组件化的盛行，一些人开始使用 CSS in JS 的方案，目前比较流行的就是 Styled Components…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/does-tree-shaking-work.md absPath of file >>> MarkdownRemark",timeToRead:2,frontmatter:{title:"Tree Shaking 真的有效吗",date:"Jul 14, 2017",tags:["前端","webpack","rollup"]},fields:{slug:"/does-tree-shaking-work/"},excerpt:"其实 Tree Shaking 出来已经挺久了，不过我还是最近才了解的。 Tree Shaking 是一个在 Rollup 中提出的概念，之后在 webpack 2 中也得到了实现。其作用是，比如说我依赖于某个模块的一部分，使用 Tree Shaking…"}},{node:{id:"/Users/zhuliangzhen/Documents/blog/src/posts/note-of-rollup.md absPath of file >>> MarkdownRemark",timeToRead:1,frontmatter:{title:"Rollup 小记",date:"Jul 09, 2017",tags:["前端","打包"]},fields:{slug:"/note-of-rollup/"},excerpt:"Rollup 是一个模块打包工具，其利用了 ES6 模块的特性，只将需要的代码进行打包，通过这种方式可以大大减小打包的体积（不用打包整个），官方称这个特性为 Tree Shaking。另外，Webpack 2 也支持了 Tree Shaking，因此 Tree Shaking…"}}],pathPrefix:"",first:!0,last:!1,index:1,pageCount:8,additionalContext:{}}}}});
//# sourceMappingURL=path---index-3c2bb2e3fa497d180499.js.map