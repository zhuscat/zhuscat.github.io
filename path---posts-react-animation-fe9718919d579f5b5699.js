webpackJsonp([0xcfcc442fade7],{521:function(a,n){a.exports={data:{markdownRemark:{html:'<p><code class="language-text">React.js</code> 提供了两个附加组件方便我们定义动画，分别为 <code class="language-text">ReactTransitionGroup</code> 和 <code class="language-text">ReactCSSTransitionGroup</code>。<code class="language-text">ReactTransitionGroup</code> 是低层次的 API，<code class="language-text">ReactCSSTransitionGoup</code> 是高层次的 API （做了进一步的封装，使用上更加方便但也相应的没有那么灵活）。</p>\n<!-- more -->\n<h2>ReactCSSTransitionGroup</h2>\n<p>使用该组件定义动画十分方便，将需要进行动画的组件由 <code class="language-text">ReactCSSTransitionGroup</code> 包括起来，并定义相关的属性即可。</p>\n<p>示例如下：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ReactCSSTransitionGroup</span> <span class="token attr-name">transitionName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span> <span class="token attr-name">transitionEnterTimeout</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">500</span><span class="token punctuation">}</span></span> <span class="token attr-name">transitionLeaveTimeout</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">{</span>items<span class="token punctuation">}</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ReactCSSTransitionGroup</span><span class="token punctuation">></span></span></code></pre>\n      </div>\n<p>对于 <code class="language-text">ReactCSSTransitionGroup</code> 下的每一个子组件，都需要指定一个 <code class="language-text">key</code> 属性，即使其下只有一个子组件也需要指定 <code class="language-text">key</code> 属性， <code class="language-text">React</code> 通过该属性决定子组件进入、离开和保持在屏幕上的行为。</p>\n<p><code class="language-text">ReactCSSTransitionGroup</code> 的本质是通过改变 <code class="language-text">CSS</code> 类达到动画的效果，一系列的类名与 <code class="language-text">transitionName</code> 有关，如指定了其值为 <code class="language-text">example</code> 后，需定义如下的 <code class="language-text">CSS</code> 类：</p>\n<ol>\n<li><code class="language-text">.example-enter</code>：动画开始之前的 <code class="language-text">CSS</code> 属性</li>\n<li><code class="language-text">.example-enter.example-enter-active</code>：动画结束时的 <code class="language-text">CSS</code> 属性(由这两个属性就可以得出进厂动画)</li>\n<li><code class="language-text">.example-leave</code>：组件离场时的初始 <code class="language-text">CSS</code> 属性。</li>\n<li><code class="language-text">.example-leave.example-leave-active</code>：组件离场后的 <code class="language-text">CSS</code> 属性。</li>\n</ol>\n<p>示例如下(来自官方文档)：</p>\n<div class="gatsby-highlight">\n      <pre class="language-css"><code class="language-css"><span class="token selector">.example-enter</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.01<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.example-enter.example-enter-active</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n  <span class="token property">transition</span><span class="token punctuation">:</span> opacity 500ms ease-in<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.example-leave</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">.example-leave.example-leave-active</span> <span class="token punctuation">{</span>\n  <span class="token property">opacity</span><span class="token punctuation">:</span> 0.01<span class="token punctuation">;</span>\n  <span class="token property">transition</span><span class="token punctuation">:</span> opacity 300ms ease-in<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>另外，<code class="language-text">ReactCSSTransitionGroup</code> 还有一个 <code class="language-text">transitionAppear</code> 属性，该属性在为 <code class="language-text">true</code> 的情况下首次挂载会进行动画。</p>\n<p>所改变的 CSS 类为：</p>\n<ol>\n<li><code class="language-text">example-appear</code></li>\n<li><code class="language-text">.example-appear.example-appear-active</code></li>\n</ol>\n<p>当然，如果你不想像上面那样命名 <code class="language-text">CSS</code>，也可以自定义 CSS  名称（官方示例）：</p>\n<div class="gatsby-highlight">\n      <pre class="language-jsx"><code class="language-jsx">  <span class="token operator">...</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ReactCSSTransitionGroup</span>\n    <span class="token attr-name">transitionName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token punctuation">{</span>\n      enter<span class="token punctuation">:</span> <span class="token string">\'enter\'</span><span class="token punctuation">,</span>\n      enterActive<span class="token punctuation">:</span> <span class="token string">\'enterActive\'</span><span class="token punctuation">,</span>\n      leave<span class="token punctuation">:</span> <span class="token string">\'leave\'</span><span class="token punctuation">,</span>\n      leaveActive<span class="token punctuation">:</span> <span class="token string">\'leaveActive\'</span><span class="token punctuation">,</span>\n      appear<span class="token punctuation">:</span> <span class="token string">\'appear\'</span><span class="token punctuation">,</span>\n      appearActive<span class="token punctuation">:</span> <span class="token string">\'appearActive\'</span>\n    <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">{</span>item<span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ReactCSSTransitionGroup</span><span class="token punctuation">></span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ReactCSSTransitionGroup</span>\n    <span class="token attr-name">transitionName</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span> <span class="token punctuation">{</span>\n      enter<span class="token punctuation">:</span> <span class="token string">\'enter\'</span><span class="token punctuation">,</span>\n      leave<span class="token punctuation">:</span> <span class="token string">\'leave\'</span><span class="token punctuation">,</span>\n      appear<span class="token punctuation">:</span> <span class="token string">\'appear\'</span>\n    <span class="token punctuation">}</span> <span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n    <span class="token punctuation">{</span>item2<span class="token punctuation">}</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ReactCSSTransitionGroup</span><span class="token punctuation">></span></span>\n  <span class="token operator">...</span></code></pre>\n      </div>\n<p>另一点需要注意的是，如果要使用该组件进行动画的话，<code class="language-text">ReactCSSTransitionGroup</code> 必须先挂载在 <code class="language-text">DOM</code> 上面才行，这一点也可以理解，当然，如果你设置了 <code class="language-text">transitionAppear={true}</code> 就不需要预先挂载。</p>\n<p>最后，还有两个属性：<code class="language-text">transitionEnter</code> 和 <code class="language-text">transitionLeave</code> ，都是用布尔值去赋值，分别定义进场和出场时是否进行动画。</p>\n<h2>ReactTransitionGroup</h2>\n<p>该组件在 <code class="language-text">react-addons-transition-group</code> 中。</p>\n<p>使用该组件有一系列生命周期函数，我看到的时候感觉十分熟悉（写过 <code class="language-text">iOS</code>，十分类似）</p>\n<ol>\n<li>\n<p>componentWillAppear(callback)</p>\n</li>\n<li>\n<p>componentDidAppear</p>\n</li>\n<li>\n<p>componentWillEnter(callback)</p>\n</li>\n<li>\n<p>componentDidEnter()</p>\n</li>\n<li>\n<p>componentWillLeave(callback)</p>\n</li>\n<li>\n<p>componentDidLeave()</p>\n<p>这些函数都有一些特点：在 <code class="language-text">callback</code> 被调用之前会阻塞不尽兴下一步操作。另外跟 <code class="language-text">ReactCSSTransitionGroup</code> 中所需要的 <code class="language-text">CSS</code> 类名进行对照就可以发现其实是一一对应的，也不难想象 <code class="language-text">ReactCSSTransitionGroup</code> 的实现方式。</p>\n</li>\n</ol>\n<p>既然 <code class="language-text">ReactTransitionGroup</code> 是组件，则其当然会对应一些 DOM 元素，默认情况下，其渲染为 <code class="language-text">span</code>，不过，你仍然可以进行进一步定制，通过设定 <code class="language-text">component</code> 属性即可，其可以是 <code class="language-text">html</code> 标签，也可以是其他自定义的组件，另外还有一个 <code class="language-text">className</code> 属性，该值会被传递给被渲染的子组件。</p>',frontmatter:{title:"React 动画",date:"August 31, 2016",tags:["前端","JavaScript","React"]},fields:{slug:"/react-animation/"}}},pathContext:{slug:"/react-animation/"}}}});
//# sourceMappingURL=path---posts-react-animation-fe9718919d579f5b5699.js.map