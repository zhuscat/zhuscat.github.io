webpackJsonp([32581919963663],{523:function(e,a){e.exports={data:{markdownRemark:{html:'<ol>\n<li><code class="language-text">@IBInspectable</code> 加了这个之后的属性可以在 storyboard 中显示</li>\n<li><code class="language-text">m34</code> 透视效果</li>\n<li>改变了 <code class="language-text">anchorPoint</code>，如果是使用 <code class="language-text">AutoLayout</code> 是要对约束做相应的修改，如一下场景，有一个视图 view1 ，有一个视图view2，view2是 view1 的 subview，view2 的约束是顶部在 view1 的顶部，左边在 view1 的左边，右边在 view1 的右边，高度为 view1 的高度，如果给 view2 设置 <code class="language-text">anchorPoint</code> 为 <code class="language-text">(0.5, 1)</code>，则要增加 view2 上方的高度为其高度的二分之一</li>\n<li>可以给 <code class="language-text">CABasicAnimation</code> 设置代理，分别在动画开始和动画结束时做一些事情。</li>\n<li>对于 <code class="language-text">CAAnimation</code> 的回调可以用 <code class="language-text">dispatch_after</code> 实现，计算好动画结束的时间</li>\n<li><code class="language-text">CALayer</code> 的 <code class="language-text">shouldRasterize</code> 在开启后会将 <code class="language-text">CALayer</code> 光栅化为 bitmap，适合那些内容不变的 layer</li>\n</ol>',frontmatter:{title:"学习 FoldingCell 笔记",date:"June 25, 2016",tags:["学习笔记","技术","开发","Swift","iOS"]},fields:{slug:"/read-folding-cell/"}}},pathContext:{slug:"/read-folding-cell/"}}}});
//# sourceMappingURL=path---posts-read-folding-cell-430d7f4b0d22c9b09be4.js.map