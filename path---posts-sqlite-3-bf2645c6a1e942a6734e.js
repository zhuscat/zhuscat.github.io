webpackJsonp([0xc939cfd04933],{518:function(t,n){t.exports={data:{markdownRemark:{html:'<p>这篇文章简单的描述了一下如何在 Swift 中使用 SQLite3，并简单地说记录一下一些函数的使用。</p>\n<!-- more -->\n<h1>正文</h1>\n<h2>添加库</h2>\n<p>点击项目设置，选择 TARGETS 中的项目，在 Linked Frameworks and Libraries 中点击 + 号，选择 libsqlite3.0.tbd 或者 libsqlite3.tdb</p>\n<p>添加桥接头文件，创建一个<code class="language-text">.h</code>文件，在里面写上：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">#import &lt;sqlite3.h&gt;</code></pre>\n      </div>\n<p>在项目设置中，在 TARGETS 中点击你的项目，选择 Build Settings ，在 Objective-C Bridging Header 中添加你的桥接头文件，到这一步，你就可以在你的项目中使用 SQLite3 了</p>\n<h2>一些函数</h2>\n<p>1、连接数据库</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sqlite3_open(filename: UnsafePointer&lt;Int8&gt;,\nppDb: UnsafeMutablePointer&lt;COpaquePointer&gt;)</code></pre>\n      </div>\n<p>打开一个数据库，根据传入的文件名，第二个参数是传入一个指针，打开成功后将指针置为一个数据库连接，如果文件不存在，则会创建文件，当操作成功时，函数返回 <code class="language-text">SQLITE_OK</code></p>\n<p>2、预编译</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sqlite3_prepare_v2(db: COpaquePointer,\nzSql: UnsafePointer&lt;Int8&gt;,\nnByte: Int32,\nppStmt: UnsafeMutablePointer&lt;COpaquePointer&gt;,\npzTail: UnsafeMutablePointer&lt;UnsafePointer&lt;Int8&gt;&gt;)</code></pre>\n      </div>\n<p>对 SQL 语句进行预编译</p>\n<p>db: 一个数据库连接，如之前用 sqlite3_open 函数后第二个参数被改变的值</p>\n<p>zSql: 要求进行预编译的语句</p>\n<p>nByte: 语句的长度，如果传入-1，则视为读到第一个 zero terminator 后结束</p>\n<p>ppStmt: 预编译的句柄</p>\n<p>pzTail: 如果其不是 NULL 的话，指向 zSql 中的第一个 SQL 语句之后的第一个字符</p>\n<p>3、执行SQL语句</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">sqlite3_exec(COpaquePointer,\nsql: UnsafePointer&lt;Int8&gt;,\ncallback: ((UnsafeMutablePointer&lt;Void&gt;, Int32, UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;, UnsafeMutablePointerPointer&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;) -&gt; Int32),\nUnsafeMutablePointer&lt;Void&gt;,\nerrmsg: UnsafeMutablePointer&lt;UnsafeMutablePointer&lt;Int8&gt;&gt;)</code></pre>\n      </div>\n<p>一共五个参数，用于执行SQL语句</p>\n<p>第一个参数：一个数据库连接\n第二个参数：要执行的SQL语句\n第三个参数：执行SQL语句之后的回调，一般是传入nil\n第四个参数：第三个参数的第一个参数，一般是传入nil\n第五个参数：错误信息，一般传入nil</p>\n<p>4、执行SQL语句后获取执行结果信息的函数</p>\n<p>这里有许多函数：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">// 传入一个句柄，之前的stmt\n// 如果返回的是SQLITE_ROW，则说明还依旧有记录存在，可以进行读取\nsqlite3_step(COpaquePointer)\n// 获取列数\nsqlite3_column_count(pStmt: COpaquePointer)\n\n// 获取列名，为第N列\nsqlite3_column_name(COpaquePointer, N: Int32)\n\n// 获取第iCol列的数据类型\n// 如int类型返回SQLITE_INTEGER\n// 数据类型比较多，可以进头文件看一下\nsqlite3_column_type(COpaquePointer, iCol: Int32)\n\n// 获取执行结果中一条记录中第iCol列的数据，且是一个int类型的\n// 类似的函数有许多，都是以sqlite3_column_开头的，用法类似，大家可以自己试一下\nsqlite3_column_int(COpaquePointer, iCol: Int32)</code></pre>\n      </div>\n<p>5、绑定数据</p>\n<p>可以绑定 SQL 语句中的 <code class="language-text">?</code></p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">// 第一个参数：stmt句柄\n// 第二个参数：第几个参数，以1开始\n// 绑定的值\n// 有许多sqlite_bind_开头的函数，用法类似\nsqlite_bind_double(COpaquePointer, Int32, Double)</code></pre>\n      </div>\n<p>6、一些stmt句柄的操作</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">// 重置句柄\nsqlite3_reset(pStmt: COpaquePointer)\n\n// 关闭句柄\n// 在结束 SQL 语句的使用之后，要调用这个函数\nsqlite3_finalize(pStmt: COpaquePointer)</code></pre>\n      </div>\n<h2>注意点</h2>\n<p>在 Swift 中使用 SQLite3 要注意的点就是注意类型，因为这是一个C语言的库，所以在 Swift 中使用有一些麻烦。\n比如字符串传入的是C字符串，需要将 Swift 中的 String 进行转换，如：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">&quot;EXAPMLE&quot;.cStringUsingEncoding(NSUTF8StringEncoding)</code></pre>\n      </div>\n<p>类似的转换还有许多，都是需要注意的。</p>\n<h2>写在最后</h2>\n<p>一开始本来只是简要的写一下，结果发现内容很多，还有许多没写的，等待以后慢慢完善吧。</p>\n<h1>更新记录</h1>\n<p>2016年4月23日：修改一个地方的格式问题</p>',frontmatter:{title:"在 Swift 中使用 SQLite3",date:"April 23, 2016",tags:["iOS","Swift","学习笔记"]},fields:{slug:"/sqlite3/"}}},pathContext:{slug:"/sqlite3/"}}}});
//# sourceMappingURL=path---posts-sqlite-3-bf2645c6a1e942a6734e.js.map