webpackJsonp([0x694f9c902ae2],{508:function(e,n){e.exports={data:{markdownRemark:{html:'<p>本文为 NSOperation 和 Dispatch Queues 的学习笔记，参考资料为<a href="http://swift.gg/2016/01/08/ios-concurrency-getting-started-with-nsoperation-and-dispatch-queues/">iOS 并发：从 NSOperation 和 Dispatch Queues 开始</a>，文章基本上可以算是这篇文章的一个概括，将各个函数的用法摘录下来了，对于学习过这方面内容的人可以起到快速回顾的作用。</p>\n<p>如果可能的话，以后会再添加关于这方面的内容到这篇文章中。</p>\n<!-- more -->\n<h1>Grand Central Dispatch</h1>\n<p>系统会缺省为每个应用提供一个串行队列和四个并发队列，这些队列全局可用，一个串行队列为主派发队列，在应用主线程执行任务，这个队列被用来更新应用的UI，四个并发队列（全局派发队列）可以使用 <code class="language-text">dispatch_get_global_queue</code> 函数获得，它们有四个不同的优先级，分别是：</p>\n<ol>\n<li>DISPATCH<em>QUEUE</em>PRIORITY_HIGH</li>\n<li>DISPATCH<em>QUEUE</em>PRIORITY_DEFAULT</li>\n<li>DISPATCH<em>QUEUE</em>PRIORITY_LOW</li>\n<li>DISPATCH<em>QUEUE</em>PRIORITY_BACKGROUND</li>\n</ol>\n<h2>主派发队列获取</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">let mainQueue = dispatch_get_main_queue()</code></pre>\n      </div>\n<h2>创建自己的串行队列</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">let newSerialQueue = dispatch_queue_create(&quot;com.example.serialQueue&quot;, DISPATCH_QUEUE_SERIAL)</code></pre>\n      </div>\n<h2>全局派发队列获取</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">let queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0)</code></pre>\n      </div>\n<h2>创建自己的并行队列</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">let newConcurrentQueue = dispatch_queue_create(&quot;com.example.concurrentQueue&quot;, DISPATCH_QUEUE_CONCURRENT)</code></pre>\n      </div>\n<h2>向队列提交任务</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">dispatch_async(queue){ () -&gt; Void in\n    // your task goes here\n}</code></pre>\n      </div>\n<h1>Operation Queues</h1>\n<ol>\n<li>Operation Queues 不遵循先进先出，可以设置Operation的优先级，可以在Operation之间添加依赖。</li>\n<li>Oeration Queues 是并发执行的，但可以通过依赖关系让任务顺序执行。</li>\n<li>Opration Queues 是 NSOperationQueue类的实例，任务被封装在 NSOperation 的实例中。</li>\n</ol>\n<p><code class="language-text">NSOperation</code> 是一个抽象类，只能使用其子类，iOS SDK中已经有两个可以使用的子类：</p>\n<ol>\n<li>NSBlockOperation</li>\n<li>NSInvocationOperation</li>\n</ol>\n<h2>用 <code class="language-text">NSOperationQueue</code> 创建一条队列并执行任务</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">let queue = NSOperationQueue()\n\nqueue.addOperationWithBlock { () -&gt; Void in\n\n    // some tasks\n\n    NSOperationQueue.mainQueue().addOperationWithBlock ({ () -&gt; Void in\n        //update UI\n    })\n}</code></pre>\n      </div>\n<h2>用 <code class="language-text">NSOperationQueue</code> 创建一条队列并以<code class="language-text">NSBlockOperation</code>的形式添加任务</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">let queue = NSOperationQueue()\n\nlet operation1 = NSBlockOperation(block: {\n    //some tasks\n    NSOperationQueue.mainQueue().addOperationWithBlock({\n        //update UI\n    })\n})\n\nqueue.addOperation(operation1)</code></pre>\n      </div>\n<h2>设置 <code class="language-text">NSOperationQueue</code> 的优先级</h2>\n<p>可以将 <code class="language-text">queuePriority</code> 属性设为以下值改变执行优先级</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">public enum NSOperationQueuePriority : Int {\n    case VeryLow\n    case Low\n    case Normal\n    case High\n    case VeryHigh\n}</code></pre>\n      </div>\n<h2>使用 <code class="language-text">NSOperation</code> 还可以设置 Completion Handler</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">operation1.completionBlock = {\n    print(&quot;Operation 1 completed&quot;)\n}</code></pre>\n      </div>\n<h2>设置依赖性</h2>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">//假设有operation1, operation2, operation3, operation4\n\noperation2.addDependency(operation1)\noperation3.addDependency(operation2)</code></pre>\n      </div>\n<p>这样执行次序为operation1 -> operation2 -> operation3，而operation4没有设置依赖，会并发执行。</p>\n<p>取消 Operation</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">queue.cancelAllOperations()</code></pre>\n      </div>\n<p>这条语句会使还未被执行的 Operation 被取消，当你对多个 Operation 设置依赖的时候可以看出效果。</p>\n<h1>参考资料</h1>\n<ol>\n<li><a href="http://swift.gg/2016/01/08/ios-concurrency-getting-started-with-nsoperation-and-dispatch-queues/">iOS 并发：从 NSOperation 和 Dispatch Queues 开始</a></li>\n</ol>',frontmatter:{title:"NSOperation 与 Dispatch Queues 学习笔记",date:"January 14, 2016",tags:["学习笔记","技术","开发","Swift","iOS"]},fields:{slug:"/note-of-nsoperation-and-dispatch-queues/"}}},pathContext:{slug:"/note-of-nsoperation-and-dispatch-queues/"}}}});
//# sourceMappingURL=path---posts-note-of-nsoperation-and-dispatch-queues-c33c2c3fac7f167a9ab2.js.map