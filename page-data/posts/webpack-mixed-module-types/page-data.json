{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/webpack-mixed-module-types","result":{"data":{"site":{"siteMetadata":{"title":"ZhusCafe"}},"markdownRemark":{"html":"<p>这是之前重构项目的时候遇到的一个问题，整理一下写成文章。我们知道，Webpack 打包的 JS 文件不能混用 ES Module 与 CommonJS，但即使在文件中没有混用，也可能因为 Babel 转码的关系导致混用情况的出现而导致错误，本文就这种情况作了详细描述。</p>\n<p>注：在本文的语境下，若不做特殊说明，Webpack 版本为 4.x，Babel 版本为 7.x。</p>\n<h2>问题</h2>\n<p>之前给一个老项目升级构建工具的时候，项目在运行时遇到了一个错误。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Uncaught TypeError: Cannot set property &#39;mylib&#39; of undefined</code></pre></div>\n<p>很快就找到跟问题有关的文件，在项目中，有一个类似这样的模块：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">global<span class=\"token punctuation\">,</span> factory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> exports <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> module <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> define <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span> <span class=\"token operator\">&amp;&amp;</span> define<span class=\"token punctuation\">.</span>amd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">define</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    global<span class=\"token punctuation\">.</span>mylib <span class=\"token operator\">=</span> <span class=\"token function\">factory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'__THIS_IS_THE_MODULE'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这是一个能兼容多种不同模块规范的文件。显然，在我们的情况下，最后一个分支被执行了，并且 <code class=\"language-text\">this</code> 是 <code class=\"language-text\">undefined</code>，显然，这是不符合预期的。预期结果应该是执行 <code class=\"language-text\">module.exports = factory()</code>。</p>\n<h2>原因</h2>\n<p>通过查看编译时候输出的日志，可以发现出现问题的原因：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&quot;export &#39;default&#39; (imported as &#39;mylib&#39;) wa not found in &#39;./mylib&#39;</code></pre></div>\n<p>由此可知，Webpack 应该是将 <code class=\"language-text\">mylib</code> 视为 ES Module 了。进一步的查看发现，这是由 Babel 转码引起的，项目的 Babel 配置使用了 <code class=\"language-text\">@vue/app</code> 这个预设，而预设中有这样的配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n  <span class=\"token property\">\"useBuiltIns\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"usage\"</span>\n  ...\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用该选项的情况下 Babel 会按需导入 Polyfill，经过转码之后，<code class=\"language-text\">mylib</code> 模块就会变成这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token string\">'xxx'</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'ooo'</span>\n\n<span class=\"token comment\">// mylib 的其他内容</span></code></pre></div>\n<p>如此一来，Webpack 就认为这是一个 ES Module 了。</p>\n<h2>其他</h2>\n<p>Babel 的配置中有一个 <a href=\"https://babeljs.io/docs/en/options#caller\">caller</a> 属性，这是用来告知 Babel 调用方能力的一个参数，比如说如果调用方支持处理 ES Module，那么 Babel 就不会把 ES Module 转换成 CommonJS 模块。因为目前 Webpack 已经原生支持 ES Module 了，因此不会让 Babel 将模块转换为 CommonJS。</p>\n<h2>参考</h2>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/42449999/webpack-import-module-exports-in-the-same-module-caused-error\">javascript - webpack: import + module.exports in the same module caused error - Stack Overflow</a></li>\n<li><a href=\"https://babeljs.io/docs/en/options#misc-options\">Options · Babel</a></li>\n<li><a href=\"https://github.com/webpack/webpack/issues/3491\">ES2015 modules can access <code class=\"language-text\">module</code> and <code class=\"language-text\">exports</code> · Issue #3491 · webpack/webpack · GitHub</a></li>\n</ol>","frontmatter":{"title":"Webpack 场景下隐性的不同模块规范混用","date":"April 30, 2019","tags":["前端","Webpack"]},"fields":{"slug":"/posts/webpack-mixed-module-types/"}}},"pageContext":{"slug":"/posts/webpack-mixed-module-types/"}},"staticQueryHashes":["3159585216"]}