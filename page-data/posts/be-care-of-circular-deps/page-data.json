{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/be-care-of-circular-deps","result":{"data":{"site":{"siteMetadata":{"title":"ZhusCafe"}},"markdownRemark":{"html":"<p>循环依赖可能会导致意想不到的 BUG，特别是一开始有循环依赖的时候，BUG 不一定会显现，然后某一次代码改动可能就突然出现因循环依赖导致的问题了，所以我们要十分注意循环依赖，理解循环依赖为什么会产生问题以及如何避免。</p>\n<h2>案例</h2>\n<p>让我们来看几个例子：</p>\n<h3>例子 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> fn_foo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./foo.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">fn_foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// foo.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> fn_bar <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./bar.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn_foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fn_bar</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn_foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>fn_foo <span class=\"token operator\">=</span>  fn_foo</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// bar.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> fn_foo <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./foo.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn_bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fn_foo</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn_bar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nexports<span class=\"token punctuation\">.</span>fn_bar <span class=\"token operator\">=</span> fn_bar</code></pre></div>\n<p>思考一下，<code class=\"language-text\">node index.js</code> 会输出什么结果呢？</p>\n<h3>例子 2</h3>\n<p>刚才的例子是 <code class=\"language-text\">commonjs</code> 模块，现在让我们看看 <code class=\"language-text\">ES Module</code>，代码差不多</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fn_foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo.mjs'</span>\n<span class=\"token function\">fn_foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// foo.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fn_bar <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.mjs'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn_foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fn_bar</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn_foo'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> fn_foo <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// bar.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> fn_foo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo.mjs'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">fn_bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fn_foo</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn_bar'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> fn_bar <span class=\"token punctuation\">}</span></code></pre></div>\n<p>想想，在这种情况下又会输出什么呢？按照自己的知识储备思考一下，让我们再看下一个例子</p>\n<h3>例子 3</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// a.mjs</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.mjs'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>想一下这种情况下输出又是什么</p>\n<h3>例子 4</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// a.js</span>\n<span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n\nexports<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.js'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>想一想这种情况下输出是什么，然后我们看最后一个例子</p>\n<h3>例子5</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// a.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> b <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./b.mjs'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> <span class=\"token number\">1</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// b.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.mjs'</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> b <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> a <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./a.mjs'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>思考一下，然后公布答案，看看与你所想的是否相同</p>\n<h3>答案</h3>\n<h4>例子 1</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">bar.js:4\n  fn_foo(count - 1)\n  ^\n\nTypeError: fn_foo is not a functio</code></pre></div>\n<h4>例子 2</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fn_bar\nfn_foo\nfn_bar\nfn_foo\nfn_bar\nfn_foo\nfn_bar\nfn_foo\nfn_bar\nfn_foo\nfn_bar\nfn_foo\nfn_bar\nfn_foo\nfn_bar\nfn_foo\nfn_bar\nfn_foo\nfn_bar\nfn_foo</code></pre></div>\n<h4>例子3</h4>\n<p>先输出 10，时隔 1s 输出 20</p>\n<h4>例子 4</h4>\n<p>先输出 10，时隔 1s 输出 10</p>\n<h4>例子 5</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">b.mjs:3\nconst b = a + 1\n          ^\n\nReferenceError: Cannot access &#39;a&#39; before initialization</code></pre></div>\n<h2>如何理解</h2>\n<p>上面的模块规范涉及两种：CommonJS 和 ES Module，具体两者的区别，有大量的文章可供阅读（如<a href=\"https://juejin.cn/post/6938581764432461854\">聊聊什么是CommonJs和Es Module及它们的区别</a>，这里说一下重点：</p>\n<p>对于 CommonJS，你可以理解每个模块是在这样一个环境中执行的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">moudle<span class=\"token punctuation\">,</span> exports</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 执行代码的时候包起来</span>\n  <span class=\"token comment\">// exports = module.exports</span>\n  <span class=\"token comment\">// require 的时候实际拿的就是 module.exports 的值</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>moudle<span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">)</span></code></pre></div>\n<p>对于 ES Module，导入的时候你拿到的实际上是对应变量的一个引用</p>\n<p>另外需要注意的是，两种模块规范重复导入模块的时候，模块都只会执行一遍（PS：当然 CommonJS 有办法清除模块缓存，这就另说了）</p>\n<p>让我们具体看一下上面例子</p>\n<h3>例子 1</h3>\n<p>我们按照导入顺序去分析代码运行即可：</p>\n<p><code class=\"language-text\">index.js</code> 中导入 <code class=\"language-text\">foo.js</code>，<code class=\"language-text\">foo.js</code> 导入 <code class=\"language-text\">bar.js</code>，<code class=\"language-text\">bar.js</code> 又导入 <code class=\"language-text\">foo.js</code>，因为之前 <code class=\"language-text\">index.js</code> 已经 <code class=\"language-text\">require</code> 过 <code class=\"language-text\">foo.js</code> 了，模块缓存中已经有 <code class=\"language-text\">foo.js</code> 了，会直接返回该模块的 <code class=\"language-text\">module.export</code>，而此时 <code class=\"language-text\">foo.js</code> 的 <code class=\"language-text\">module.exports</code> 还是 <code class=\"language-text\">{}</code>（后面 <code class=\"language-text\">exports.fn_foo</code> 还没有执行），因此 <code class=\"language-text\">fn_foo</code> 是 <code class=\"language-text\">undefined</code>，因此 fn_bar 中的 <code class=\"language-text\">fn_foo</code> 是 <code class=\"language-text\">undefined</code>，到这里相信你就知道输出结果的原因了。</p>\n<h3>例子 2</h3>\n<p>前面说过，ES Module 实际上引入的是一个引用，让我们看代码，<code class=\"language-text\">bar.mjs</code> 导入了 <code class=\"language-text\">foo.mjs</code>，此时的 <code class=\"language-text\">fn_foo</code> 我们可以理解为一个引用，因此，当 <code class=\"language-text\">fn_foo(10)</code> 的时候，两个模块中的 <code class=\"language-text\">fn_bar</code> 和 <code class=\"language-text\">fn_foo</code> 都有正确的值</p>\n<h3>例子 3</h3>\n<p>还是之前说的，ES Module 引入的变量可以理解为一个引用，因此前后两次打印，<code class=\"language-text\">a</code> 的值会发生变化</p>\n<h3>例子 4</h3>\n<p>与例子 3 相似的例子，对于 CommonJS 来说，<code class=\"language-text\">exports.a = a</code> 就是值拷贝，<code class=\"language-text\">exports.a</code> 与 <code class=\"language-text\">a</code> 变量就没有关系了</p>\n<h3>例子 5</h3>\n<p><code class=\"language-text\">b.mjs</code> 引入了 <code class=\"language-text\">a</code>，注意这可以理解为一个引用，然后直接对 <code class=\"language-text\">a</code> 进行了 <code class=\"language-text\">+1</code> 操作，此时，<code class=\"language-text\">a</code> 还没有初始化，因此报错</p>\n<h2>注意一件事</h2>\n<p>如果你完全理解上面几个例子，相信循环依赖的事情已经难不倒你了，相信你也理解两种常用的模块规范之间的区别了，但是要注意的一点是，我们的代码通常会经过转码、打包，当前时间节点，一般还是打包会把代码各个模块转换为 CommonJS 规范的模块，因此最终行为与 ES Module 还是有不一致的，比如对于例子 5 来说，经过转码的结果是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> _a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_a<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// a.js</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__esModule\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> _b <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./b.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> _b<span class=\"token punctuation\">.</span>b <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// b.js</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__esModule\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> _a <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> _a<span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nexports<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></code></pre></div>\n<p>最终结果就不是报错，而是 <code class=\"language-text\">NaN</code> 了。</p>\n<h2>如何避免</h2>\n<p>实践上，良好的架构设计。</p>\n<p>工具上，可以利用一些辅助工具，如 <a href=\"https://github.com/aackerman/circular-dependency-plugin\">circular-dependency-plugin</a></p>\n<h2>为什么写这篇文章</h2>\n<p>工作这几年，已经好几次遇到代码库中因循环依赖导致的问题了，而且循环依赖问题不是当代码库中已经出现循环依赖的代码的时候就会立刻暴露出来的，而当暴露出来的时候，每次 debug 又会花不少的时间，因此总结一下。</p>\n<p>有时候，出现循环依赖是合理的，有时候，出现循环依赖则可能是代码结构设计有问题，需要对出现循环依赖的模块进行重新划分。特别是要注意的是，如果一个模块除了导出的函数、变量...之外，会立即执行很多逻辑，且其中又用到了其他模块的功能，且又有循环依赖的时候，就要很小心了。</p>","frontmatter":{"title":"警惕循环依赖","date":"November 17, 2021","tags":["前端","JavaScript"]},"fields":{"slug":"/posts/be-care-of-circular-deps/"}}},"pageContext":{"slug":"/posts/be-care-of-circular-deps/"}},"staticQueryHashes":["3159585216"]}