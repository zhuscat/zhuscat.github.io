{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/javascript-number","result":{"data":{"site":{"siteMetadata":{"title":"ZhusCafe"}},"markdownRemark":{"html":"<p>JavaScript 中的数字（<code class=\"language-text\">number</code> 类型）占据 64 位，为 IEEE 754 规范的双精度浮点数，其二进制的表示形式如下：</p>\n<p><img src=\"https://i.loli.net/2019/04/20/5cbb351228bca.png\" alt=\"618px-IEEE_754_Double_Floating_Point_Format.svg.png\"></p>\n<h2>规约形式的浮点数(normal number)</h2>\n<p>数值大小公式为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">((-1) ** sign) * 1.fraction * (2 ** (exponent - 1023))</code></pre></div>\n<p>其中，exponent 的取值为 1 到 2046</p>\n<h2>非规约形式的浮点数(subnormal number)</h2>\n<p>当 exponent 为 0 时，数字大小的公式为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">((-1) ** sign) * 0.fraction * 2 ** -1022</code></pre></div>\n<p>可以看到，非规约形式的浮点数弥补了 0 与 1 之间的取值，而规约形式的浮点数因为有前导 1，最小正数为 <code class=\"language-text\">1 * (2 ** -1022)</code>。</p>\n<h2>特殊值</h2>\n<h3>0</h3>\n<p>当 exponent 为 0，且 fraction 为 0 的时候，数值为 0，可见，0 分为 +0 和 -0</p>\n<h3>Infinity</h3>\n<p>当 exponent 为 2047 且 fraction 为 0 的时候，值的意义为无穷，可见，根据符号位不同，可分为 <code class=\"language-text\">+Infinity</code> 和 <code class=\"language-text\">-Infinity</code></p>\n<h3>NaN</h3>\n<p>当 exponent 位 2047 且 fraction 不为 0 的时候</p>\n<h2>关于整数</h2>\n<p>因为整数也是用双精度浮点数存储，因此能正常表示精度的整数范围为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(-2 ** 53 + 1) ~ (2 ** 53 -1)</code></pre></div>\n<p>推算也很简单，当 fraction 全部用上的时候，为 52 位，再加上前导 1 的一位。</p>\n<h2>查看数字的二进制表示</h2>\n<p>写了个简单的函数可以返回数字的二进制表示以及 sign、exponent 以及 fraction 部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getNumberBits</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> f64a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Float64Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataView</span><span class=\"token punctuation\">(</span>f64a<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    b <span class=\"token operator\">+=</span> v\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getUint8</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    bits<span class=\"token operator\">:</span> b<span class=\"token punctuation\">,</span>\n    sign<span class=\"token operator\">:</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    exponent<span class=\"token operator\">:</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fraction<span class=\"token operator\">:</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>未来</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt\">BigInt</a> 是一个新增的基本类型（Primitive），目前已经进入 Stage 3，有了 BigInt，我们就可以精确的表达更大的整数了。</p>","frontmatter":{"title":"说说 JavaScript 中的数字","date":"April 20, 2019","tags":["JavaScript"]},"fields":{"slug":"/posts/javascript-number/"}}},"pageContext":{"slug":"/posts/javascript-number/"}},"staticQueryHashes":["3159585216"]}