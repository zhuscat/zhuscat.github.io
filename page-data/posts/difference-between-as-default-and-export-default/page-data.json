{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/difference-between-as-default-and-export-default","result":{"data":{"site":{"siteMetadata":{"title":"ZhusCafe"}},"markdownRemark":{"html":"<p>昨天组里面讨论了一些 JS 模块相关的问题。其中说到了 ES Module 导出的是对应变量的「引用」，或者说是对应变量的一个绑定。然后被问到：<code class=\"language-text\">export default</code> 也是这样吗？</p>\n<p>我以为 <code class=\"language-text\">export default name</code> 和 <code class=\"language-text\">export { name }</code> 的行为是一样的，在 <code class=\"language-text\">import</code> 一个模块中的变量实际上是这些变量的一个绑定，在访问变量时取到的就是当时模块中变量对应的值。</p>\n<p>如下 <code class=\"language-text\">export { name }</code> 的形式，在 <code class=\"language-text\">index.js</code> 中，在调用了 <code class=\"language-text\">changeName</code> 之后，<code class=\"language-text\">index.js</code> 中的 <code class=\"language-text\">name</code> 就从 <code class=\"language-text\">&quot;John&quot;</code> 变成 <code class=\"language-text\">&quot;Arya&quot;</code> 了，这没有什么疑问。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// foo.js</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> _name\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> changeName <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo.js'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"John\"</span>\n<span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Arya'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"Arya\"</span></code></pre></div>\n<p>但是下面的代码就跟我原来以为的不一样了，看起来，<code class=\"language-text\">export default name</code> 导出的是值的一个浅拷贝，<code class=\"language-text\">index.js</code> 中的 <code class=\"language-text\">name</code> 值不会变。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// foo.js</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> _name\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> name</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">import</span> name<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> changeName <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo.js'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 我以为是 \"John\"，实际是 \"John\"</span>\n<span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Arya'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 我以为是 \"Arya\"，实际是 \"John\"</span></code></pre></div>\n<p>不过，导出默认值还有另一个写法，也就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// foo.js</span>\n<span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'John'</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">changeName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  name <span class=\"token operator\">=</span> _name\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> name <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果这样一来，那么在 <code class=\"language-text\">index.js</code> 中，<code class=\"language-text\">name</code> 的值又会变了。</p>\n<p>总结一下，如果是 <code class=\"language-text\">export default &lt;name&gt;</code> 的话，导出的就是对应值的一个浅拷贝了，而 <code class=\"language-text\">export { &lt;name&gt; as default }</code> 就还是对变量的一个绑定。以上行为是在 Chrome 中使用原生 ES Module 进行测试的。不过，这个区别在实际开发中倒是没什么用，在平时编写模块的时候，应该避免使用这种行为。另外，有兴趣的话也可以看看 Babel 是如何转码 ES Module 的。</p>","frontmatter":{"title":"export default <name> 和 export { <name> as default } 的区别","date":"August 29, 2019","tags":["JavaScript"]},"fields":{"slug":"/posts/difference-between-as-default-and-export-default/"}}},"pageContext":{"slug":"/posts/difference-between-as-default-and-export-default/"}},"staticQueryHashes":["3159585216"]}