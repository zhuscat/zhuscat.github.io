{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/note-of-nsdate","webpackCompilationHash":"722d290f5d07faf97795","result":{"data":{"site":{"siteMetadata":{"title":"ZhusCafe"}},"markdownRemark":{"html":"<p>日期与时间是一个在开发中经常要用到的，最近看到了一篇 <a href=\"http://swift.gg/2015/12/14/a-beginners-guide-to-nsdate-in-swift/\">NSDate 的教程</a>，写的很详细，但是不免有些枯燥与乏味，即使是一个 iOS 初学者，也能很快明白 NSDate 的内容，其实主要就是一些函数的使用，只要照着下面的代码打一遍，弄明白每一条语句的作用，基本上就是会使用了，我也是照着那篇教程打了一遍，顺便加了注释，所以这次就直接给出代码了。</p>\n<!-- more -->\n<h1>代码</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import UIKit\n\n// NSDate 与 String 的转换\n\nlet currentDate = NSDate() //初始化NSDate对象即可获取当前时间\n//Jan 17, 2016, 1:01 PM\n\nlet dateFormatter = NSDateFormatter()\n// 默认采用设备中的位置信息\n\ndateFormatter.locale = NSLocale.currentLocale()\n// 设置当前位置，默认就是这样\n\n//dateFormatter.locale = NSLocale(localeIdentifier: &quot;fr_FR&quot;)\n// 设置为法国\n\n// 用Date Formatter Style 为输出设置格式\n\ndateFormatter.dateStyle = NSDateFormatterStyle.FullStyle\n// 设置 Date Formatter Style 为 FullStyle\n\nvar convertedDate = dateFormatter.stringFromDate(currentDate)\n// 将currentDate转换为 String\n\ndateFormatter.dateStyle = NSDateFormatterStyle.LongStyle\n// 设置 Date Formatter Style 为 LongStyle\n\nvar convertedDate2 = dateFormatter.stringFromDate(currentDate)\n// 将currentDate转换为 String\n// .FullStyle .LongStyle .MediumStyle .ShortStyle\n\n/*\nEEEE: 表示星期, 使用1-3个字母为缩写\nMMMM: 月份全写, 1-3个字母为缩写\ndd: 日期\nyyyy: 年份\nHH: 小时\nmm: 分钟\nss: 秒\nzzz: 时区\nGGG: BC 或者 AD\n*/\n\ndateFormatter.dateFormat = &quot;EEEE, MMMM dd, yyyy&quot;\nconvertedDate = dateFormatter.stringFromDate(currentDate)\n\nvar dateAsString = &quot;2016-01-16 08:00&quot;\ndateFormatter.dateFormat = &quot;yyyy-MM-dd HH:mm&quot;\nvar newDate = dateFormatter.dateFromString(dateAsString)\n//返回 NSDate?\n\nlet calendar = NSCalendar.currentCalendar()\n\nlet dateComponents = calendar.components([NSCalendarUnit.Day, NSCalendarUnit.Month,\n    NSCalendarUnit.Year, NSCalendarUnit.WeekOfYear, NSCalendarUnit.Hour,\n    NSCalendarUnit.Minute,NSCalendarUnit.Second, NSCalendarUnit.Nanosecond],\n    fromDate: currentDate)\n// 第一个参数是 NSCalendarUnit 的数组, 没有在数组中列出的内容不能在 dateComponents 中访问\n// 否则会引发一个运行时错误\n\nprint(&quot;day = \\(dateComponents.day)&quot;)\n\n// 将 NSDateComponents 转变为 NSDate\nlet components = NSDateComponents()\ncomponents.day = 16\ncomponents.month = 1\ncomponents.year = 2016\ncomponents.hour = 8\ncomponents.minute = 30\ncomponents.timeZone = NSTimeZone(abbreviation: &quot;CST&quot;)\nnewDate = calendar.dateFromComponents(components)\n//从 NSDateComponents 转变为 NSDate 需要用一个 NSCalendar 实例\n\nprint(&quot;Earlier date: \\(newDate!.earlierDate(currentDate))&quot;)\n// 比较时间方法1, 还有 laterDate, 会返回 NSDate\n\nif newDate!.compare(currentDate) == NSComparisonResult.OrderedAscending {\n    print(&quot;newDate is elarlier than currentDate.&quot;)\n}\n// 比较时间方法2, 返回 NSComparisonResult\n\n/*\nNSComparisonResult\n1. OrderedAscending\n2. OrderedDescending\n3. ORderedSame\n*/\n\nif newDate!.timeIntervalSinceReferenceDate &lt; currentDate.timeIntervalSinceReferenceDate {\n    print(&quot;newDate is elarlier than currentDate.&quot;)\n}\n\nif newDate!.isEqualToDate(currentDate) {\n    print(&quot;newDate is equal to currentDate.&quot;)\n}\nelse {\n    print(&quot;newDate is not equal to currentDate.&quot;)\n}\n\nvar calculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(.Month,\n    value: 1, toDate: currentDate, options: NSCalendarOptions.init(rawValue: 0))\n\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingUnit(.Day,\n    value: 3, toDate: calculatedDate!, options: NSCalendarOptions.init(rawValue: 0))\n// 使用 NSCalendarUnit 增加时间\n\nlet newDateComponents = NSDateComponents()\nnewDateComponents.month = 1\nnewDateComponents.day = 3\n\ncalculatedDate = NSCalendar.currentCalendar().dateByAddingComponents(newDateComponents,\n    toDate: calculatedDate!, options: NSCalendarOptions.init(rawValue: 0))\n// 使用 NSDateComponents 增加时间\n\n// 还可以用 dateByAddingTimeInterval\n\nvar diffDateComponents = NSCalendar.currentCalendar().components([NSCalendarUnit.Day],\n    fromDate: newDate!, toDate: currentDate, options: NSCalendarOptions.init(rawValue: 0))\n\nprint(&quot;The difference of day: \\(diffDateComponents.day)&quot;)\n//计算时间差值\n\nlet dateComponentsFormatter = NSDateComponentsFormatter()\ndateComponentsFormatter.unitsStyle = NSDateComponentsFormatterUnitsStyle.Full\n// 可以指定不同的 NSDateComponentsFormatterUnitsStyle\n\nlet interval = currentDate.timeIntervalSinceDate(newDate!)\n\nprint(dateComponentsFormatter.stringFromTimeInterval(interval)!)</code></pre></div>\n<h1>参考资料</h1>\n<ol>\n<li><a href=\"http://swift.gg/2015/12/14/a-beginners-guide-to-nsdate-in-swift/\">Swift 的 NSDate 初学者指南</a></li>\n</ol>","frontmatter":{"title":"NSDate 学习笔记","date":"January 17, 2016","tags":["学习笔记","技术","开发","Swift","iOS"]},"fields":{"slug":"/posts/note-of-nsdate/"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/note-of-nsdate/"}}}