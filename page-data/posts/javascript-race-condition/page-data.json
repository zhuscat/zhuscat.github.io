{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/javascript-race-condition","result":{"data":{"site":{"siteMetadata":{"title":"ZhusCafe"}},"markdownRemark":{"html":"<h2>问题描述</h2>\n<p>如搜索场景，当搜索关键词发生变化的时候需要重新发起请求</p>\n<p>如询价询券场景，当商品数量、发货方式等条件发生改变的时候需要重新发起请求</p>\n<p>有可能会出现后面发起的请求比前面发起的请求返回更快的情况，在发生这种情况的时候，就会出现界面展示信息的错误</p>\n<h2>解决方案</h2>\n<p>这里与主流框架结合提供几个解决的方法，旨在阐明核心的解决思路</p>\n<p>第一种，每次请求的时候可以生成一个ID，在应用请求返回结果的时候看，比对最新ID与该请求对应的ID是否一致，如果不一致则抛弃结果</p>\n<h3>React 实现（仅展示关键逻辑）</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 当搜索词 keyword 发生变化的时候重新发起请求</span>\n<span class=\"token keyword\">const</span> latestIdRef <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentId <span class=\"token operator\">=</span> latestIdRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  latestIdRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> currentId\n  <span class=\"token function\">searchSomething</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>latestIdRef<span class=\"token punctuation\">.</span>current <span class=\"token operator\">!==</span> currentId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 抛弃</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 应用结果</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>keyword<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Vue 2.x</h3>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;input v-model=&quot;keyword&quot; /&gt;\n    &lt;!-- 加载中的时候不让点击 --&gt;\n    &lt;button :disabled=&quot;isLoading&quot;&gt;下一步&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    data() {\n      return {\n        isLoading: false,\n        keyword: &#39;&#39;,\n        latestId: 0,\n      }\n    }\n    }\n    // ...\n    watch: {\n      keyword() {\n        const latestId = this.latestId + 1\n        this.latestId = latestId\n        this.isLoading = true\n        searchSomething(this.keyword).then((res) =&gt; {\n          if (this.latestId !== latestId) {\n            // 抛弃\n            return\n          }\n          // 应用结果\n          // ...\n          this.isLoading = false\n        }).catch(err =&gt; {\n          if (this.latestId !== latestId) {\n            // 抛弃\n            return\n          }\n          // ...\n          this.isLoading = false\n        })\n      }\n    }\n  }\n&lt;/script&gt;</code></pre></div>\n<p>另外，我们也可以借助框架提供的消除副作用的方法，比如 useEffect</p>\n<h3>React 实现</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> valid <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token function\">searchSomething</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 抛弃</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 应用结果</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    valid <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>keyword<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>还要其他一些类似的思路来解决这样的问题，总而言之，就是要防止旧的请求结果被应用</p>\n<h2>封装</h2>\n<p>业界已经有针对这种场景的解决方式：如 <code class=\"language-text\">rxjs</code> 中有 <code class=\"language-text\">switchMap</code>，<code class=\"language-text\">redux-saga</code> 中有 <code class=\"language-text\">takeLatest</code>，如果使用 <code class=\"language-text\">vue 2.x</code>（目前工作使用的主要框架），在不引入额外的依赖的情况下，我还没有想出一个比较完美的方案，可以不重复写上面那样的代码，当然可以封装这样一个函数，但是还是需要在 <code class=\"language-text\">catch</code> 中处理一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CancelError</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Error</span> <span class=\"token punctuation\">{</span>\n  hasCanceld <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">takeLatest</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  <span class=\"token function-variable function\">fn</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">wrap</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> _id <span class=\"token operator\">=</span> id<span class=\"token operator\">++</span>\n    id <span class=\"token operator\">=</span> _id\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_id <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancelError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> v\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> wrap\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>keyword<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    ret<span class=\"token operator\">:</span> keyword<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> _search <span class=\"token operator\">=</span> <span class=\"token function\">takeLatest</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">_search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理业务逻辑</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">CancelError</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 什么事都不做</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 处理错误逻辑</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"前端竞态问题的解决","date":"October 17, 2021","tags":["JavaScript"]},"fields":{"slug":"/posts/javascript-race-condition/"}}},"pageContext":{"slug":"/posts/javascript-race-condition/"}},"staticQueryHashes":["3159585216"]}