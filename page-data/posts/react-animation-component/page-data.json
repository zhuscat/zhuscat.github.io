{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/react-animation-component","result":{"data":{"site":{"siteMetadata":{"title":"ZhusCafe"}},"markdownRemark":{"html":"<p>最近写了一个 React 动画组件，在这里记录一下实现的思路。</p>\n<p>动画组件参考了 React 官方的实现和 React-Component 的 Animate 组件，这两个组件的实现思路大同小异。</p>\n<!-- more -->\n<p>假设这个组件的名称为 <code class=\"language-text\">Animator</code> ，使用形式类似于下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Animator</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        i.name\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Item</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Animator</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 <code class=\"language-text\">Animator</code> 包裹后，当新插入 item，删除 item 的时候，会有动画产生。</p>\n<p>主要的思路是，<code class=\"language-text\">Animator</code> 组件内部有一个 <code class=\"language-text\">state</code> 来保存将要渲染的 children，当有新的 children 进来的时候（以 <code class=\"language-text\">props</code> 的方式，会将 <code class=\"language-text\">state</code> 中的 children 和新的 children 进行合并，这期间(即 <code class=\"language-text\">componentWillReceiveProps</code>），又要决定哪些元素是要进行入场动画的，哪些元素是要进行出场动画的，然后重新渲染，渲染结束之后，再对 children 进行动画操作。</p>\n<p>简单来说， <code class=\"language-text\">Animator</code> 提供了一个缓冲区，在元素实际上是要删除的时候，<code class=\"language-text\">Animator</code> 通过 <code class=\"language-text\">state</code> 将其保存住，在做完动画之后才真正地删除。</p>\n<p>接下来我们再更加细致地看看这个 <code class=\"language-text\">Animator</code> 该如何实现。</p>\n<p>在 <code class=\"language-text\">componentWillReceiveProps</code> 这个生命周期中，会传入新的 <code class=\"language-text\">props</code>，因此我们可以拿到接下来要展示的 children（命名为 <code class=\"language-text\">nextChildren</code>)，另外就是 <code class=\"language-text\">state</code> 保存着的 children (命名为 <code class=\"language-text\">prevChildren</code> )，然后我们执行一个 <code class=\"language-text\">mergeChildren</code> 的操作，将 <code class=\"language-text\">prevChildren</code> 和 <code class=\"language-text\">nextChildren</code> 进行合并，接着，找出所有需要进行入场动画的孩子节点，也就是在 <code class=\"language-text\">nextChildren</code> 中但是不在 <code class=\"language-text\">prevChildren</code> 中的节点，以及所有需要进行离场动画的孩子节点，也就是在 <code class=\"language-text\">prevChildren</code> 中但是不在 <code class=\"language-text\">nextChildren</code> 中的节点，我们将这些节点分别用 <code class=\"language-text\">keysToEnter</code> 和 <code class=\"language-text\">keysToLeave</code> 保存。至于如何找到这些节点，我们规定，使用该组件的话，所有孩子节点都需要指定一个与其他孩子不同的 <code class=\"language-text\">key</code> 属性，这样就可以轻松找到节点了。</p>\n<p>那么，节点要怎么进行合并呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">mergeChildren</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> nextChildrenPending <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> pendingChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  prev<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">findChildByKey</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pendingChildren<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        nextChildrenPending<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pendingChildren<span class=\"token punctuation\">;</span>\n        pendingChildren <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      pendingChildren<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  next<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">child</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>child <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>nextChildrenPending<span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>nextChildrenPending<span class=\"token punctuation\">[</span>child<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>pendingChildren<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上就是合并两个孩子节点数组的方法，<code class=\"language-text\">findChildByKey</code> 方法根据 key 值在一个孩子节点数组中寻找，寻找成功返回 <code class=\"language-text\">true</code> ，否则返回 <code class=\"language-text\">false</code>，相信大家很容易就能看懂是怎么实现的（在纸上模拟一下情况就知道了）。</p>\n<p>接着就是要在 <code class=\"language-text\">componentDidUpdate</code> 这个生命周期方法中写一些代码了，我们根据之前保存的 <code class=\"language-text\">keysToEnter</code> 和 <code class=\"language-text\">keysToLeave</code> 所对应的节点进行相应的动画操作，我们可以约定孩子节点可以实现类似 <code class=\"language-text\">componentWillEnter</code>，<code class=\"language-text\">compoenntDidEnter</code> 之类的方法，然后我们就可以在适当的时候去调用这些方法。需要注意的是，在离场动画结束之后，需要将该离场了节点从 <code class=\"language-text\">state</code> 中删除，这样才符合逻辑。</p>\n<p>另外，在实现这个组件的时候犯了个小错误：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>该函数不会修改原数组，之前使用该方法忘记赋值，然后程序出现逻辑上的错误，找了好久才发现，一定要牢记在心。</p>\n<p>顺便说一说</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>proptype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>该函数会修改原数组，并且会返回新的数组长度。</p>","frontmatter":{"title":"React 动画组件实现思路","date":"September 22, 2016","tags":["前端","JavaScript","React"]},"fields":{"slug":"/posts/react-animation-component/"}}},"pageContext":{"slug":"/posts/react-animation-component/"}},"staticQueryHashes":["3159585216"]}