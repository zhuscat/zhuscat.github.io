{"version":3,"sources":["webpack:///path---posts-loose-equal-ab5f72420a188f65700b.js","webpack:///./.cache/json/posts-loose-equal.json"],"names":["webpackJsonp","496","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,kqGAA+6FC,aAAyYC,MAAA,cAAAC,KAAA,oBAAAC,MAAA,oBAA4EC,QAAWC,KAAA,mBAAyBC,aAAgBD,KAAA","file":"path---posts-loose-equal-ab5f72420a188f65700b.js","sourcesContent":["webpackJsonp([116113189383529],{\n\n/***/ 496:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"http://7xpc78.com1.z0.glb.clouddn.com/loose-equal/loose-equal.jpg\\\" alt=\\\"loose equal\\\"></p>\\n<p><code class=\\\"language-text\\\">==</code> 在 <code class=\\\"language-text\\\">JavaScript</code> 中与其他许多语言有着不同的行为，在 <code class=\\\"language-text\\\">JavaScript</code> 中，<code class=\\\"language-text\\\">==</code> 在比较双方的类型不同的时候进行强制类型转换，正因为这点，<code class=\\\"language-text\\\">==</code> 运算符遭到了很多人的诟病，但是，<code class=\\\"language-text\\\">==</code> 也有着自己的优势，比如适当的时候可以让代码更加简洁，<code class=\\\"language-text\\\">==</code> 的转换规则并不难，本文总结了其转换规则供大家参考。</p>\\n<h3>特殊情况</h3>\\n<p><code class=\\\"language-text\\\">NaN</code> 不等于 <code class=\\\"language-text\\\">NaN</code></p>\\n<p><code class=\\\"language-text\\\">+0</code> 等于 <code class=\\\"language-text\\\">-0</code></p>\\n<h3>字符串与数字的比较</h3>\\n<p>将字符串转换为数字然后进行比较</p>\\n<h3>其他类型与布尔类型之间的比较</h3>\\n<p>将布尔类型转换为数字，然后再进行比较</p>\\n<p><code class=\\\"language-text\\\">false</code> 转为 <code class=\\\"language-text\\\">0</code></p>\\n<p><code class=\\\"language-text\\\">true</code> 转换为 <code class=\\\"language-text\\\">1</code></p>\\n<h3>null 和 undefined 之间的比较</h3>\\n<p><code class=\\\"language-text\\\">null == undefined</code> 为 <code class=\\\"language-text\\\">true</code></p>\\n<h3>对象和非对象之间的比较</h3>\\n<p>对对象做 <code class=\\\"language-text\\\">ToPrimitive</code> 操作，然后再比较</p>\\n<h3>实例运用</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// true</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">![]</code> 将 <code class=\\\"language-text\\\">[]</code> 转换为布尔值，值为 <code class=\\\"language-text\\\">false</code>，所以上式变为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">false</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">[]</code> 是对象，对其做 <code class=\\\"language-text\\\">ToPrimitive</code> 操作，转换为 <code class=\\\"language-text\\\">&#39;&#39;</code>，所以上式变为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">false</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">false</code> 转换为数字 <code class=\\\"language-text\\\">0</code>，上式变为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">&#39;&#39;</code> 转换为数字，转换为<code class=\\\"language-text\\\">0</code>，所以上式变为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span></code></pre>\\n      </div>\\n<p>结果为 <code class=\\\"language-text\\\">true</code></p>\",\"frontmatter\":{\"title\":\"Loose Equal\",\"date\":\"November 18, 2016\",\"tags\":[\"前端\",\"JavaScript\"]},\"fields\":{\"slug\":\"/loose-equal/\"}}},\"pathContext\":{\"slug\":\"/loose-equal/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-loose-equal-ab5f72420a188f65700b.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><img src=\\\"http://7xpc78.com1.z0.glb.clouddn.com/loose-equal/loose-equal.jpg\\\" alt=\\\"loose equal\\\"></p>\\n<p><code class=\\\"language-text\\\">==</code> 在 <code class=\\\"language-text\\\">JavaScript</code> 中与其他许多语言有着不同的行为，在 <code class=\\\"language-text\\\">JavaScript</code> 中，<code class=\\\"language-text\\\">==</code> 在比较双方的类型不同的时候进行强制类型转换，正因为这点，<code class=\\\"language-text\\\">==</code> 运算符遭到了很多人的诟病，但是，<code class=\\\"language-text\\\">==</code> 也有着自己的优势，比如适当的时候可以让代码更加简洁，<code class=\\\"language-text\\\">==</code> 的转换规则并不难，本文总结了其转换规则供大家参考。</p>\\n<h3>特殊情况</h3>\\n<p><code class=\\\"language-text\\\">NaN</code> 不等于 <code class=\\\"language-text\\\">NaN</code></p>\\n<p><code class=\\\"language-text\\\">+0</code> 等于 <code class=\\\"language-text\\\">-0</code></p>\\n<h3>字符串与数字的比较</h3>\\n<p>将字符串转换为数字然后进行比较</p>\\n<h3>其他类型与布尔类型之间的比较</h3>\\n<p>将布尔类型转换为数字，然后再进行比较</p>\\n<p><code class=\\\"language-text\\\">false</code> 转为 <code class=\\\"language-text\\\">0</code></p>\\n<p><code class=\\\"language-text\\\">true</code> 转换为 <code class=\\\"language-text\\\">1</code></p>\\n<h3>null 和 undefined 之间的比较</h3>\\n<p><code class=\\\"language-text\\\">null == undefined</code> 为 <code class=\\\"language-text\\\">true</code></p>\\n<h3>对象和非对象之间的比较</h3>\\n<p>对对象做 <code class=\\\"language-text\\\">ToPrimitive</code> 操作，然后再比较</p>\\n<h3>实例运用</h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token operator\\\">!</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token comment\\\">// true</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">![]</code> 将 <code class=\\\"language-text\\\">[]</code> 转换为布尔值，值为 <code class=\\\"language-text\\\">false</code>，所以上式变为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">false</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">[]</code> 是对象，对其做 <code class=\\\"language-text\\\">ToPrimitive</code> 操作，转换为 <code class=\\\"language-text\\\">&#39;&#39;</code>，所以上式变为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token boolean\\\">false</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">false</code> 转换为数字 <code class=\\\"language-text\\\">0</code>，上式变为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token string\\\">''</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">&#39;&#39;</code> 转换为数字，转换为<code class=\\\"language-text\\\">0</code>，所以上式变为</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">0</span></code></pre>\\n      </div>\\n<p>结果为 <code class=\\\"language-text\\\">true</code></p>\",\"frontmatter\":{\"title\":\"Loose Equal\",\"date\":\"November 18, 2016\",\"tags\":[\"前端\",\"JavaScript\"]},\"fields\":{\"slug\":\"/loose-equal/\"}}},\"pathContext\":{\"slug\":\"/loose-equal/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-loose-equal.json\n// module id = 496\n// module chunks = 116113189383529"],"sourceRoot":""}