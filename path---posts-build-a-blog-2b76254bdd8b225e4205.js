webpackJsonp([0x62ddacbbe6fe],{474:function(e,t){e.exports={data:{markdownRemark:{html:'<h1>前言</h1>\n<p>这篇文章描述了如何使用GitHub，GitCafe和Hexo创建一个独立博客。虽然网上有许多这方面的教程了，但是在我建立这个独立博客的过程中，发生了许多不是我所看的一篇教程就所能解决的问题，因此，我决定以我创建这个博客的视角来写一篇教程。我创建这个博客所用的平台是Mac OS X，如果你使用的是其他操作系统，步骤也是大同小异。本文既适合作为同时使用GitHub，GitCafe和Hexo创建一个独立博客的教程，也适合作为单独使用GitHub和Hexo创建一个独立博客或单独使用GitCafe创建一个独立博客的教程。</p>\n<p>本文参考了许多教程，我已经将大部分写到了参考资料栏目中，后续修改我会继续增加参考资料。如果文章有任何错误的地方，欢迎大家指出。</p>\n<p><strong>注：</strong>文章还没有最终完成，还有许多要润色修改的地方。</p>\n<!-- more -->\n<h1>为什么将博客同时部署到GitHub和GitCafe上</h1>\n<p>原本我是仅仅将博客部署到GitHub上的，在我完成之后，我确发现有时候访问博客十分缓慢，于是我决定将博客同时部署到GitHub和GitCafe上，通过DNS分流，国内访问GitCafe，国外访问GitHub，从而提升博客的访问速度。</p>\n<h1>准备工作</h1>\n<p>下载并安装Node.js: <a href="https://nodejs.org">https://nodejs.org</a></p>\n<p>下载并安装Git: <a href="http://git-scm.com">http://git-scm.com</a></p>\n<h1>如何打开Git？</h1>\n<p>此处内容来自<a href="http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/">如何搭建一个独立博客——简明 Github Pages与 jekyll 教程</a>。</p>\n<h2>Windows平台操作</h2>\n<ul>\n<li>1、开始菜单Git Bash</li>\n</ul>\n<p><img src="https://i.loli.net/2018/11/17/5befc0e0df691.jpg" alt="StartMenu"></p>\n<ul>\n<li>2、鼠标右键打开Git Bash</li>\n</ul>\n<p><img src="https://i.loli.net/2018/11/17/5befc1de3da4e.jpg" alt="Menu2"></p>\n<h2>Mac平台操作</h2>\n<p>安装Git后可直接在终端(terminal)操作。</p>\n<h1>注册GitHub和GitCafe</h1>\n<p>分别在<a href="https://github.com">GitHub</a>和<a href="https://gitcafe.com">GitCafe</a>上注册。</p>\n<h1>配置和使用GitHub与GitCafe</h1>\n<p>打开终端（Windows平台打开Git Bash)，下同，不再反复说明。\n<strong>提示：</strong>执行命令都是在终端（Windows下为Git Bash)中进行的。</p>\n<h2>配置和使用GitHub</h2>\n<h3>1.检查SSH Keys的设置</h3>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ cd ~/.ssh</code></pre>\n      </div>\n<p>如果显示<code class="language-text">No such file or directory</code>，到第三步，否则继续。\n<strong>提示：</strong><code class="language-text">cd</code>命令为设置当前工作目录，如<code class="language-text">cd /Users</code>为进入Users目录。</p>\n<h3>2.备份和删除原来的SSH Key设置</h3>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ ls\nconfig id_rsa id_rsa.pub known_hosts\n$ mkdir key_backup\n$ cp id_rsa* key_backup\n$ rm id_rsa*</code></pre>\n      </div>\n<h3>3.生成新的SSH Key</h3>\n<p>输入下面代码并回车，当询问你在哪里保存key的时候，回车就好。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ ssh-keygen -t rsa -C &quot;你的邮箱@youremail.com&quot;\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa)</code></pre>\n      </div>\n<p>然后输入你的密码，输入密码的时候屏幕上不会显示，输完后按回车就行了</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;\nEnter same passphrase again:&lt;再次输入加密串&gt;</code></pre>\n      </div>\n<p>当看到下面的界面就说明你已经成功设置了SSH Key</p>\n<p><img src="https://i.loli.net/2018/11/17/5befc1e2cd560.png" alt="SSHSetting"></p>\n<h3>4.添加SSH Key到GitHub</h3>\n<ol>\n<li>用文本编辑工具打开id_rsa.pub文件，如果看不到这个文件，你需要设置显示隐藏文件，复制这个文件里的内容。</li>\n<li>登陆GitHub,点击右上角头像->Settings->SSH Keys->Add SSH Key</li>\n<li>把你刚才复制的内容复制到Key文本框中并添加一个Title，点击Add Key</li>\n</ol>\n<h3>5.测试</h3>\n<p>在terminal中输入</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ ssh -T git@github.com</code></pre>\n      </div>\n<p>如果出现如下内容</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?</code></pre>\n      </div>\n<p>输入yes即可，然后就会看到</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre>\n      </div>\n<h3>6.设置用户信息</h3>\n<p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。\nGit 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ git config --global user.name &quot;username&quot;//用户名\n$ git config --global user.email  &quot;你的邮箱@youremail.com&quot;//填写自己的邮箱</code></pre>\n      </div>\n<h3>7.SSH Key配置成功</h3>\n<p>本机已成功连接到GitHub。</p>\n<h2>配置和使用GitCafe</h2>\n<p>这里假定你已经完成了以上步骤</p>\n<h3>1.进入存放SSH的目录</h3>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ cd ~/.ssh</code></pre>\n      </div>\n<h3>2.生成新的SSH公钥</h3>\n<p>执行以下命令</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ ssh-keygen -t rsa -C &quot;你的邮箱@youremail.com&quot; -f ~/.ssh/gitcafe</code></pre>\n      </div>\n<h3>3.完成之后，在SSH的文件夹下，可以看到GitCafe私钥和公钥文件</h3>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">gitcafe\ngitcafe.pub</code></pre>\n      </div>\n<h3>4.生成配置文件</h3>\n<p>执行以下命令</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ touch ~/.ssh/config</code></pre>\n      </div>\n<p>用文本编辑程序打开config文件，添加以下内容</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Host gitcafe.com www.gitcafe.com\nIdentityuFile ~/.ssh/gitcafe</code></pre>\n      </div>\n<h3>5.添加SSH Key到GitCafe</h3>\n<p>登陆GitCafe，点击右上角头像->账户设置->SSH公钥管理->添加新的公钥，将gitcafe.pub中内容复制进去并添加一个名称。</p>\n<h3>6.测试</h3>\n<p>执行以下命令</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ ssh -T git@gitcafe.com -i ~/.ssh/gitcafe</code></pre>\n      </div>\n<p>这里的输出信息与操作步骤与GitHub相似，当最后看到如下内容就成功了</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">Hi username! You&#39;ve successfully authenticated, but GitCafe does not provide shell access.</code></pre>\n      </div>\n<h3>7.SSH Key配置成功</h3>\n<p>本机已成功连接到GitCafe</p>\n<h1>使用GitHub Pages和GitCafe Pages创建个人页面</h1>\n<h2>使用GitHub Pages创建个人页面</h2>\n<p>可以按照<a href="https://pages.github.com">GitHub Pages</a>上的指引进行操作，这里我将以terminal为示例，当然你也可以使用GitHub的客户端。</p>\n<h3>创建一个仓库(repository)</h3>\n<p>创建一个命名为username.github.io的仓库，username为你在GitHub上注册的用户名（一定要相同）</p>\n<h3>测试GitHub Pages</h3>\n<p><strong>注：</strong>这里的内容不是必须做的，因为稍后会用Hexo创建博客，这里仅仅是用于测试你的GitHub Pages是否成功创建，因此可以略过这个步骤。另外，GitHub Pages有一定的延迟，在你对username.github.io这个仓库做出修改之后，过一段时间才会在username.github.io这个网站上出现你修改后的内容。</p>\n<h4>1. 在terminal中输入:</h4>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ git clone https://github.com/username/username.github.io</code></pre>\n      </div>\n<h4>2. 进入你创建的文件夹:</h4>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ cd username.github.io</code></pre>\n      </div>\n<h4>3. 增加一个index.html:</h4>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ echo &quot;Hello World&quot; &gt; index.html</code></pre>\n      </div>\n<h4>4. Push:</h4>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ git add --all\n$ git commit -m &quot;Initial commit&quot;\n$ git push -u origin master</code></pre>\n      </div>\n<h4>5. 访问username.github.io</h4>\n<p>访问username.github.io(将username改为你在GitHub上注册的用户名）你就可以看到Hello World字样了，这说明你成功创建了自己的页面，当然现在还没有博客的功能。</p>\n<h2>使用GitCafe Pages创建个人页面</h2>\n<h3>创建项目</h3>\n<p>项目名称要与自己的用户名字相同，比如你的用户名是username，那么项目名称也要是username。</p>\n<h3>测试GitCafe Pages</h3>\n<p>这里与测试GitHub Pages大同小异，由于不是必要步骤，就不再反复阐述，详细步骤可以访问<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9">Pages相关帮助</a>。访问GitCafe Pages的网址是：username.gitcafe.io（将username改为你在GitCafe上注册的用户名）。</p>\n<p>详情可访问<a href="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9">Pages 相关帮助</a>。</p>\n<h1>使用Hexo生成博客</h1>\n<p>详细内容可以看<a href="https://hexo.io/docs/">Hexo的官方文档</a>，这里也将描述步骤。</p>\n<h2>安装Hexo</h2>\n<p>执行以下命令</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ sudo npm install -g hexo-cli</code></pre>\n      </div>\n<p>等待一些一定的时间之后出现成功安装的提示后就行了。</p>\n<p>如果出现错误，可能是由于网络原因，国内的网络环境大家懂的。我们可以用npm的国内镜像来解决。\n执行以下命令</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ npm config set registry https://registry.npm.taobao.org\n$ npm info underscore （如果上面配置正确这个命令会有字符串response）</code></pre>\n      </div>\n<p>成功后再输入以下内容即可</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ sudo npm install -g hexo-cli</code></pre>\n      </div>\n<p>安装完成后，进行初始化，在终端中输入</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ hexo init &lt;folder&gt;\n$ cd &lt;folder&gt;\n$ npm install</code></pre>\n      </div>\n<p><strong>注：</strong>如果你不输入<folder>，则会在当前目录下创建，为了方便描述，我将用<strong>博客文件夹</strong>来描述你init的这个目录。\n<strong>提示：</strong>在本文中，以<code class="language-text">hexo</code>开头的命令需要在博客文件夹下执行。\n至此，安装工作完成。</p>\n<h2>生成静态页面</h2>\n<p>在终端中进入博客文件夹（如果已经在博客文件夹下则不用）</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ cd &lt;folder&gt;</code></pre>\n      </div>\n<p>执行如下命令</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ hexo generate</code></pre>\n      </div>\n<p>如此，静态页面创建成功。</p>\n<h2>本地启动</h2>\n<p>执行如下命令(需要在博客文件夹下)</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ hexo server</code></pre>\n      </div>\n<p>然后在浏览器中输入<a href="http://localhost:4000">http://localhost:4000</a>即可查看你所生成的页面</p>\n<h2>配置Hexo</h2>\n<p>用文本编辑工具打开你博客文件夹目录下的<code class="language-text">_config.yml</code></p>\n<p>将deploy的内容改为如下内容并保存(username是你在GitHub和GitCafe注册的用户名)：</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">deploy:\n- type: git\n  repo: git@github.com:username/username.github.io.git,master\n- type: git\n  repo: git@gitcafe.com:username/username.git,gitcafe-pages</code></pre>\n      </div>\n<p>另外你可以看到<code class="language-text">config.yml</code>下有许多属性，该文件也已经做了一定的注释，比如说<code class="language-text">title</code>是你站点的名字，<code class="language-text">author</code>是博主的名称等等，可以按照你的需要更改。</p>\n<h2>使用Hexo写博客</h2>\n<p>执行如下命令新建一篇文章，<code class="language-text">title</code>是你保存文件的名称。</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ hexo new &quot;title&quot;</code></pre>\n      </div>\n<p>然后你就可以打开生成的文件进行编辑了，所生成的文件在你博客目录的source/_posts下，文章采用Markdown编写。</p>\n<p>关于Markdown语法，可以参考<a href="http://wowubuntu.com/markdown/basic.html">Markdown 语法说明(简体中文版)</a>。</p>\n<h2>将博客部署到GitHub和GitCafe</h2>\n<p>每次对文件夹进行了修改，都需要重新执行generate命令，在你博客文件夹下执行</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ hexo generate</code></pre>\n      </div>\n<p>成功生成页面后再执行</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ hexo deploy</code></pre>\n      </div>\n<p>成功后你就把博客部署到GitHub和GitCafe上了。</p>\n<p>前面说到过，Pages有一定的延迟，一段时间后再访问 <a href="http://username.github.io">http://username.github.io</a> 或者 <a href="http://username.gitcafe.io">http://username.gitcafe.io</a> 你就能看到自己生成的页面了。</p>\n<h2>部署步骤</h2>\n<p>以后每次部署，可以按照以下步骤进行（都是在博客文件夹下执行）</p>\n<div class="gatsby-highlight">\n      <pre class="language-text"><code class="language-text">$ hexo clean\n$ hexo generate\n$ hexo deploy</code></pre>\n      </div>\n<h2>使用主题</h2>\n<p>博客创建成功了，自然少不了主题，我目前所使用的主题是NexT。</p>\n<p>详细步骤可以浏览<a href="http://theme-next.iissnan.com">NexT主题官方文档</a>，里面做了详细的解释，这里不再赘述。</p>\n<p>至此，独立博客建立完成，但还不完美，因为现在必须在浏览器中输入你的Pages页面，当然，你的博客已经可以使用了，一下的内容将讲述如何将自己的域名与Pages页面进行绑定，比如访问我的博客输入<a href="http://zhuscat.com">zhuscat.com</a>就行了。</p>\n<p>更多内容请访问<a href="https://hexo.io/docs/">Hexo的官方文档</a>查看。</p>\n<h1>注册域名</h1>\n<p>我是在<a href="https://www.godaddy.com">GoDaddy</a>在购买的域名，主要原因是可以使用支付宝，进入网站后搜索你想要的域名，如果可以购买的话就按照指引进行购买就行了。</p>\n<p>如果不明白如何购买，可以参考<a href="http://www.admin5.com/article/20131014/527495.shtml">《2013年10月新版godaddy域名注册图文教程》</a>。</p>\n<h1>将独立域名与GitHub Pages和GitCafe Pages进行绑定</h1>\n<h2>GitHub Pages的设置</h2>\n<p>在你创建的博客文件夹下的source文件夹中创建一个命名为CNAME的文件(可以使用文本编辑器创建，如记事本），该文件没有扩展名，内容为你申请的域名地址（如zhuscat.com)。</p>\n<h2>GitCafe Pages的设置</h2>\n<p>登陆GitCafe，进入你所创建的项目，点击项目设置->Pages服务->添加你所申请的域名(如zhuscat.com)。</p>\n<h2>DNS设置</h2>\n<p>注册<a href="https://www.dnspod.cn/">DNSPod</a>，添加域名，并按下图所示设置</p>\n<p><strong>注：</strong>如果没有国内国外选项，则将国内记录分别改为电信，联通，教育网这几个记录，国外则为默认。</p>\n<p><img src="https://i.loli.net/2018/11/17/5befc37a33b9d.png" alt="DNSPodSetting"></p>\n<p>其中需要修改 zhuscat.github.io 为你自己的 username.github.io 。</p>\n<h2>修改GoDaddy中的DNS地址</h2>\n<p>这里的内容参考了<a href="http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/">如何搭建一个独立博客——简明 Github Pages与 jekyll 教程</a></p>\n<p>更改 GoDaddy 的 Nameservers 为 DNSPod 的 Nameservers。</p>\n<p>1、登陆GoDaddy，点击右上角用户名，点击管理域名(Manage My Domains)</p>\n<p><img src="https://i.loli.net/2018/11/17/5befc406a91c0.png" alt="Manage My Domain"></p>\n<p>2、点击页面右方的第二个图标（图片中显示为黑色的）将视图改为列表显示</p>\n<p><img src="https://i.loli.net/2018/11/17/5befc45e29853.png" alt="Click Button"></p>\n<p>3、点击域名</p>\n<p><img src="https://i.loli.net/2018/11/17/5befc48703edc.png" alt="Click Domain Name"></p>\n<p>4、进入域名详情后，点击Nameservers一栏的Manage</p>\n<p><img src="https://i.loli.net/2018/11/17/5befc4a0e4be6.png" alt="Domain Detail"></p>\n<p>4、将 GoDaddy 的 Nameservers 改为 f1g1ns1.dnspod.net 和 f1g1ns2.dnspod.net 并保存</p>\n<p><img src="https://i.loli.net/2018/11/17/5befc4c111a2c.png" alt="Nameserver Settings"></p>\n<p>修改生效可能有一定的延迟，一段时间后，你就可以用自己的域名去访问啦！</p>\n<h1>图床</h1>\n<p>可以使用<a href="http://www.qiniu.com/">七牛</a>。</p>\n<p>至此，你就完成了所有步骤，赶紧你的独立博客之旅吧。</p>\n<h1>更新日志</h1>\n<p>2015-12-26 第一次更新：修改部分描述，增加了一些提示内容，修改了部分图片。</p>\n<h1>参考资料</h1>\n<p><a href="">1</a>(<a href="http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/">http://cnfeat.com/blog/2014/05/10/how-to-build-a-blog/</a>)</p>\n<p><a href="">2</a>(<a href="http://www.jianshu.com/p/465830080ea9">http://www.jianshu.com/p/465830080ea9</a>)</p>\n<p><a href="">3</a>(<a href="http://www.sumrday.com/2014/09-18-Hello-Hexo.html">http://www.sumrday.com/2014/09-18-Hello-Hexo.html</a>)</p>\n<p><a href="">4</a>(<a href="http://ppting.me/2015/02/08/gitcafe/">http://ppting.me/2015/02/08/gitcafe/</a>)</p>\n<p><a href="">5</a>(<a href="http://beiyuu.com/github-pages/">http://beiyuu.com/github-pages/</a>)</p>',frontmatter:{title:"使用GitHub，GitCafe和Hexo创建一个独立博客",date:"December 25, 2015",tags:["教程","创建博客"]},fields:{slug:"/build-a-blog/"}}},pathContext:{slug:"/build-a-blog/"}}}});
//# sourceMappingURL=path---posts-build-a-blog-2b76254bdd8b225e4205.js.map