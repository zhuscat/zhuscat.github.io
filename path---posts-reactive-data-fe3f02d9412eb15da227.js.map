{"version":3,"sources":["webpack:///path---posts-reactive-data-fe3f02d9412eb15da227.js","webpack:///./.cache/json/posts-reactive-data.json"],"names":["webpackJsonp","520","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAs9hCC,aAAm2BC,MAAA,aAAAC,KAAA,qBAAAC,MAAA,oBAA4EC,QAAWC,KAAA,qBAA2BC,aAAgBD,KAAA","file":"path---posts-reactive-data-fe3f02d9412eb15da227.js","sourcesContent":["webpackJsonp([162625417449081],{\n\n/***/ 520:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>最近有被问到 Vue 的响应式数据的原理，第一次被问到的时候有点语无伦次的感觉吧。对于一个知识点，看过，然后自己理解一下是一个层次，能够讲出来让别人明白就是另一个层次了。对于源码的阅读，我比较喜欢去明白一些机制的原理，比较理想的情况下是能够在明白源码的原理之后，在不查看源码的情况下能够实现类似的功能。今天我就尝试一下实现响应式数据，当然，在实现上比较粗略，以原理为主，在此之前，需要知道几个基本点。</p>\\n<p>首先是 <code class=\\\"language-text\\\">Observer</code> 类，在 Vue 中，通过 <code class=\\\"language-text\\\">Observer</code> 来给属性添加 <code class=\\\"language-text\\\">setter</code> 和 <code class=\\\"language-text\\\">getter</code>，这是 Vue 实现响应式机制的关键。</p>\\n<p>第二点是 <code class=\\\"language-text\\\">Watcher</code> 类，Vue 的每一个组件都有一个 <code class=\\\"language-text\\\">Watcher</code> 实例，组件渲染的过程中会把相应属性记为依赖，之后当相应属性的 <code class=\\\"language-text\\\">setter</code> 被调用的时候，会通知 <code class=\\\"language-text\\\">Watcher</code> 实例进行计算，然后触发重新渲染。</p>\\n<p>第三点是 <code class=\\\"language-text\\\">Dep</code>，前面说到了 <code class=\\\"language-text\\\">Observer</code> 和 <code class=\\\"language-text\\\">Watcher</code>，还提到 <code class=\\\"language-text\\\">Watcher</code> 实例会在依赖属性的 <code class=\\\"language-text\\\">setter</code> 调用时候重新计算，那么 <code class=\\\"language-text\\\">Watcher</code> 实例是如何被通知的呢？这里就得说到 <code class=\\\"language-text\\\">Dep</code> 这个类了，正式通过 <code class=\\\"language-text\\\">Dep</code> 实例来通知相应的 <code class=\\\"language-text\\\">Watcher</code> 实例进行重新计算。</p>\\n<p>不多说，开始写代码。</p>\\n<p>首先实现 <code class=\\\"language-text\\\">Observer</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Observer</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> keys <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keys<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> key <span class=\\\"token operator\\\">=</span> keys<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token keyword\\\">let</span> val <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n      Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> val\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          val <span class=\\\"token operator\\\">=</span> newVal\\n          console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'receive new value'</span><span class=\\\"token punctuation\\\">,</span> newVal<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'[object Object]'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Observer</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>就这样，初步实现了一个 <code class=\\\"language-text\\\">Observer</code> 类，来测试一下我们能否知道属性被设置新值。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span>\\n  obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    key1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key1'</span><span class=\\\"token punctuation\\\">,</span>\\n    key2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key2'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n\\ndata<span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">.</span>key1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'key1_changed'</span>\\n<span class=\\\"token comment\\\">// console 输出:</span>\\n<span class=\\\"token comment\\\">// receive new value key1_changed</span></code></pre>\\n      </div>\\n<p>可以看到，通过设置对象属性的 <code class=\\\"language-text\\\">setter</code> 和 <code class=\\\"language-text\\\">getter</code>，我们能够在设置属性或者获取属性值的时候做一些额外的事情。</p>\\n<p>接着我们定义一下 <code class=\\\"language-text\\\">Watcher</code> 类</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Watcher</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> exp<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>exp <span class=\\\"token operator\\\">=</span> exp\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> fn\\n    <span class=\\\"token comment\\\">// ...more</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Watcher</code> 的构造函数大概长这个样子，然后我们可以通过下面的方式来“观察”对象：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span>\\n  obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    key1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key1'</span><span class=\\\"token punctuation\\\">,</span>\\n    key2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key2'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data.a changed'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>然后每次 <code class=\\\"language-text\\\">data.a</code> 被重新设置的时候，控制台会输出 <code class=\\\"language-text\\\">data.a changed</code></p>\\n<p>那么具体来讲该怎么实现呢？直观来讲，我们会想到，在对应的 <code class=\\\"language-text\\\">setter</code> 属性里面加一些代码，当 <code class=\\\"language-text\\\">setter</code> 被调用的时候，调用对应 <code class=\\\"language-text\\\">Watcher</code> 实例的方法就可以了，那么，该怎么实现呢，这个时候就要请出连接 <code class=\\\"language-text\\\">Observer</code> 和 <code class=\\\"language-text\\\">Watcher</code> 的桥梁，<code class=\\\"language-text\\\">Dep</code> 了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Dep</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">addSub</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">includes</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">notify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>sub <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      sub<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Dep</code> 类就这样简单的实现了，思想就是将 <code class=\\\"language-text\\\">Watcher</code> 实例放到 <code class=\\\"language-text\\\">subs</code> 里面，当 <code class=\\\"language-text\\\">Dep#notify</code> 调用的时候，调用相应 <code class=\\\"language-text\\\">Watcher</code> 实例的 <code class=\\\"language-text\\\">fn</code> 函数。</p>\\n<p>不过，现在 <code class=\\\"language-text\\\">Dep</code> 还没能将 <code class=\\\"language-text\\\">Watcher</code> 和 <code class=\\\"language-text\\\">Observer</code> 连接起来，接下来我们需要修改 <code class=\\\"language-text\\\">Watcher</code> 和 <code class=\\\"language-text\\\">Observer</code> 函数。</p>\\n<p>首先给 <code class=\\\"language-text\\\">Dep</code> 加一个静态属性，<code class=\\\"language-text\\\">Dep.target</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Dep<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span></code></pre>\\n      </div>\\n<p>接着修改 <code class=\\\"language-text\\\">Wathcer</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">pushTarget</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Dep<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">=</span> watcher\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Watcher</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> exp<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>exp <span class=\\\"token operator\\\">=</span> exp\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> fn\\n    <span class=\\\"token function\\\">pushTarget</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n    data<span class=\\\"token punctuation\\\">[</span>exp<span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>好的，这个时候有必要解释一下了，<code class=\\\"language-text\\\">Dep.target</code> 是一个 <code class=\\\"language-text\\\">Watcher</code> 实例，每当我们创建一个新的 <code class=\\\"language-text\\\">Watcher</code> 实例的时候，会通过 <code class=\\\"language-text\\\">pushTarget</code> 函数修改 <code class=\\\"language-text\\\">Dep.target</code>，将其设为这个新初始化的 <code class=\\\"language-text\\\">Watcher</code> 实例，接着，下面一行代码是 <code class=\\\"language-text\\\">data[exp]</code>，咦，这行代码有什么用？这里我对问题先做一下简化，即 <code class=\\\"language-text\\\">exp</code> 为 <code class=\\\"language-text\\\">data</code> 的一个 <code class=\\\"language-text\\\">key</code>（真正的实现不仅可以是 <code class=\\\"language-text\\\">key</code>，还可以是类似<code class=\\\"language-text\\\">key1.key2</code> 这样的形式，还可以是函数，但是从原理上来讲是一样的）。那么，<code class=\\\"language-text\\\">data[exp]</code> 其实就是调用响应属性的 <code class=\\\"language-text\\\">getter</code>！前面说过，通过 <code class=\\\"language-text\\\">Observer</code> 设置了对象属性的 <code class=\\\"language-text\\\">setter</code> 和 <code class=\\\"language-text\\\">getter</code>，所以我们可以在 <code class=\\\"language-text\\\">setter</code> 和 <code class=\\\"language-text\\\">getter</code> 里面做一些事情，而 <code class=\\\"language-text\\\">data[exp]</code> 所要做的就是收集依赖！</p>\\n<p>接着进一步修改 <code class=\\\"language-text\\\">Observer</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Observer</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> keys <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keys<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> key <span class=\\\"token operator\\\">=</span> keys<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token keyword\\\">let</span> val <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">const</span> dep <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Dep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// +++</span>\\n          dep<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addSub</span><span class=\\\"token punctuation\\\">(</span>Dep<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token comment\\\">// +++</span>\\n          <span class=\\\"token keyword\\\">return</span> val\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// +++</span>\\n          <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newVal <span class=\\\"token operator\\\">===</span> val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span>\\n          dep<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">notify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n          val <span class=\\\"token operator\\\">=</span> newVal\\n          <span class=\\\"token comment\\\">// +++</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>看，通过这种方式，对象的每一个属性都有一个 <code class=\\\"language-text\\\">Dep</code> 实例，其 <code class=\\\"language-text\\\">Dep#subs</code> 记录了依赖于这个属性的 <code class=\\\"language-text\\\">watcher</code>，每当这个属性被重新赋值的时候，会通过调用 <code class=\\\"language-text\\\">Dep#notify</code> 来通知 <code class=\\\"language-text\\\">Watcher</code> 该属性改变了。另外，当使用相同值重复设置属性的时候，不会去触发通知。</p>\\n<p>先贴一下所有代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Dep</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">addSub</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">includes</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">notify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>sub <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      sub<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nDep<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">pushTarget</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Dep<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">=</span> watcher\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Observer</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> keys <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keys<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> key <span class=\\\"token operator\\\">=</span> keys<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token keyword\\\">let</span> val <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">const</span> dep <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Dep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          dep<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addSub</span><span class=\\\"token punctuation\\\">(</span>Dep<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token keyword\\\">return</span> val\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newVal <span class=\\\"token operator\\\">===</span> val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span>\\n          dep<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">notify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n          val <span class=\\\"token operator\\\">=</span> newVal\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'[object Object]'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Observer</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Watcher</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> exp<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>exp <span class=\\\"token operator\\\">=</span> exp\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> fn\\n    <span class=\\\"token function\\\">pushTarget</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n    data<span class=\\\"token punctuation\\\">[</span>exp<span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>用刚才上面提到的代码测试一下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span>\\n  obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    key1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key1'</span><span class=\\\"token punctuation\\\">,</span>\\n    key2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key2'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data.a changed'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\ndata<span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'a_change'</span>\\n<span class=\\\"token comment\\\">// 控制台输出：</span>\\n<span class=\\\"token comment\\\">// data.a changed</span></code></pre>\\n      </div>\\n<p>好了，以上就是在 Vue 中，响应式数据的一个大概原理了，当然，很多细节没有照顾到，而 Vue 的具体实现跟上面所说的也有所不同，Vue 的实现会复杂许多，比如上面的实现 <code class=\\\"language-text\\\">Dep#notify</code> 是直接调用 <code class=\\\"language-text\\\">fn</code>，但在 Vue 中，有一个 <code class=\\\"language-text\\\">Wathcer#update</code> 方法，<code class=\\\"language-text\\\">Dep#notify</code> 实际上调用的是这个方法，如在 <code class=\\\"language-text\\\">Watcher</code> 实例中设置的函数可以获取值的新值跟旧值，大家可以自行尝试实现，等等等等，大家可以参考 <code class=\\\"language-text\\\">Vue</code> 中 <code class=\\\"language-text\\\">Watcher</code> 具体的 API，我就不再一一赘述了，因为这篇文章着重讲的是一个实现原理。</p>\",\"frontmatter\":{\"title\":\"Reactivity\",\"date\":\"September 08, 2017\",\"tags\":[\"JavaScript\",\"前端\"]},\"fields\":{\"slug\":\"/reactive-data/\"}}},\"pathContext\":{\"slug\":\"/reactive-data/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-reactive-data-fe3f02d9412eb15da227.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>最近有被问到 Vue 的响应式数据的原理，第一次被问到的时候有点语无伦次的感觉吧。对于一个知识点，看过，然后自己理解一下是一个层次，能够讲出来让别人明白就是另一个层次了。对于源码的阅读，我比较喜欢去明白一些机制的原理，比较理想的情况下是能够在明白源码的原理之后，在不查看源码的情况下能够实现类似的功能。今天我就尝试一下实现响应式数据，当然，在实现上比较粗略，以原理为主，在此之前，需要知道几个基本点。</p>\\n<p>首先是 <code class=\\\"language-text\\\">Observer</code> 类，在 Vue 中，通过 <code class=\\\"language-text\\\">Observer</code> 来给属性添加 <code class=\\\"language-text\\\">setter</code> 和 <code class=\\\"language-text\\\">getter</code>，这是 Vue 实现响应式机制的关键。</p>\\n<p>第二点是 <code class=\\\"language-text\\\">Watcher</code> 类，Vue 的每一个组件都有一个 <code class=\\\"language-text\\\">Watcher</code> 实例，组件渲染的过程中会把相应属性记为依赖，之后当相应属性的 <code class=\\\"language-text\\\">setter</code> 被调用的时候，会通知 <code class=\\\"language-text\\\">Watcher</code> 实例进行计算，然后触发重新渲染。</p>\\n<p>第三点是 <code class=\\\"language-text\\\">Dep</code>，前面说到了 <code class=\\\"language-text\\\">Observer</code> 和 <code class=\\\"language-text\\\">Watcher</code>，还提到 <code class=\\\"language-text\\\">Watcher</code> 实例会在依赖属性的 <code class=\\\"language-text\\\">setter</code> 调用时候重新计算，那么 <code class=\\\"language-text\\\">Watcher</code> 实例是如何被通知的呢？这里就得说到 <code class=\\\"language-text\\\">Dep</code> 这个类了，正式通过 <code class=\\\"language-text\\\">Dep</code> 实例来通知相应的 <code class=\\\"language-text\\\">Watcher</code> 实例进行重新计算。</p>\\n<p>不多说，开始写代码。</p>\\n<p>首先实现 <code class=\\\"language-text\\\">Observer</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Observer</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> keys <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keys<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> key <span class=\\\"token operator\\\">=</span> keys<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token keyword\\\">let</span> val <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n      Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> val\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          val <span class=\\\"token operator\\\">=</span> newVal\\n          console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'receive new value'</span><span class=\\\"token punctuation\\\">,</span> newVal<span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'[object Object]'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Observer</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>就这样，初步实现了一个 <code class=\\\"language-text\\\">Observer</code> 类，来测试一下我们能否知道属性被设置新值。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span>\\n  obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    key1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key1'</span><span class=\\\"token punctuation\\\">,</span>\\n    key2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key2'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n\\ndata<span class=\\\"token punctuation\\\">.</span>obj<span class=\\\"token punctuation\\\">.</span>key1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'key1_changed'</span>\\n<span class=\\\"token comment\\\">// console 输出:</span>\\n<span class=\\\"token comment\\\">// receive new value key1_changed</span></code></pre>\\n      </div>\\n<p>可以看到，通过设置对象属性的 <code class=\\\"language-text\\\">setter</code> 和 <code class=\\\"language-text\\\">getter</code>，我们能够在设置属性或者获取属性值的时候做一些额外的事情。</p>\\n<p>接着我们定义一下 <code class=\\\"language-text\\\">Watcher</code> 类</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Watcher</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> exp<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>exp <span class=\\\"token operator\\\">=</span> exp\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> fn\\n    <span class=\\\"token comment\\\">// ...more</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Watcher</code> 的构造函数大概长这个样子，然后我们可以通过下面的方式来“观察”对象：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span>\\n  obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    key1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key1'</span><span class=\\\"token punctuation\\\">,</span>\\n    key2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key2'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data.a changed'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\\n<p>然后每次 <code class=\\\"language-text\\\">data.a</code> 被重新设置的时候，控制台会输出 <code class=\\\"language-text\\\">data.a changed</code></p>\\n<p>那么具体来讲该怎么实现呢？直观来讲，我们会想到，在对应的 <code class=\\\"language-text\\\">setter</code> 属性里面加一些代码，当 <code class=\\\"language-text\\\">setter</code> 被调用的时候，调用对应 <code class=\\\"language-text\\\">Watcher</code> 实例的方法就可以了，那么，该怎么实现呢，这个时候就要请出连接 <code class=\\\"language-text\\\">Observer</code> 和 <code class=\\\"language-text\\\">Watcher</code> 的桥梁，<code class=\\\"language-text\\\">Dep</code> 了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Dep</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">addSub</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">includes</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">notify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>sub <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      sub<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p><code class=\\\"language-text\\\">Dep</code> 类就这样简单的实现了，思想就是将 <code class=\\\"language-text\\\">Watcher</code> 实例放到 <code class=\\\"language-text\\\">subs</code> 里面，当 <code class=\\\"language-text\\\">Dep#notify</code> 调用的时候，调用相应 <code class=\\\"language-text\\\">Watcher</code> 实例的 <code class=\\\"language-text\\\">fn</code> 函数。</p>\\n<p>不过，现在 <code class=\\\"language-text\\\">Dep</code> 还没能将 <code class=\\\"language-text\\\">Watcher</code> 和 <code class=\\\"language-text\\\">Observer</code> 连接起来，接下来我们需要修改 <code class=\\\"language-text\\\">Watcher</code> 和 <code class=\\\"language-text\\\">Observer</code> 函数。</p>\\n<p>首先给 <code class=\\\"language-text\\\">Dep</code> 加一个静态属性，<code class=\\\"language-text\\\">Dep.target</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Dep<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span></code></pre>\\n      </div>\\n<p>接着修改 <code class=\\\"language-text\\\">Wathcer</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">pushTarget</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Dep<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">=</span> watcher\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Watcher</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> exp<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>exp <span class=\\\"token operator\\\">=</span> exp\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> fn\\n    <span class=\\\"token function\\\">pushTarget</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n    data<span class=\\\"token punctuation\\\">[</span>exp<span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>好的，这个时候有必要解释一下了，<code class=\\\"language-text\\\">Dep.target</code> 是一个 <code class=\\\"language-text\\\">Watcher</code> 实例，每当我们创建一个新的 <code class=\\\"language-text\\\">Watcher</code> 实例的时候，会通过 <code class=\\\"language-text\\\">pushTarget</code> 函数修改 <code class=\\\"language-text\\\">Dep.target</code>，将其设为这个新初始化的 <code class=\\\"language-text\\\">Watcher</code> 实例，接着，下面一行代码是 <code class=\\\"language-text\\\">data[exp]</code>，咦，这行代码有什么用？这里我对问题先做一下简化，即 <code class=\\\"language-text\\\">exp</code> 为 <code class=\\\"language-text\\\">data</code> 的一个 <code class=\\\"language-text\\\">key</code>（真正的实现不仅可以是 <code class=\\\"language-text\\\">key</code>，还可以是类似<code class=\\\"language-text\\\">key1.key2</code> 这样的形式，还可以是函数，但是从原理上来讲是一样的）。那么，<code class=\\\"language-text\\\">data[exp]</code> 其实就是调用响应属性的 <code class=\\\"language-text\\\">getter</code>！前面说过，通过 <code class=\\\"language-text\\\">Observer</code> 设置了对象属性的 <code class=\\\"language-text\\\">setter</code> 和 <code class=\\\"language-text\\\">getter</code>，所以我们可以在 <code class=\\\"language-text\\\">setter</code> 和 <code class=\\\"language-text\\\">getter</code> 里面做一些事情，而 <code class=\\\"language-text\\\">data[exp]</code> 所要做的就是收集依赖！</p>\\n<p>接着进一步修改 <code class=\\\"language-text\\\">Observer</code></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Observer</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> keys <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keys<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> key <span class=\\\"token operator\\\">=</span> keys<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token keyword\\\">let</span> val <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">const</span> dep <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Dep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// +++</span>\\n          dep<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addSub</span><span class=\\\"token punctuation\\\">(</span>Dep<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token comment\\\">// +++</span>\\n          <span class=\\\"token keyword\\\">return</span> val\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// +++</span>\\n          <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newVal <span class=\\\"token operator\\\">===</span> val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span>\\n          dep<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">notify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n          val <span class=\\\"token operator\\\">=</span> newVal\\n          <span class=\\\"token comment\\\">// +++</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>看，通过这种方式，对象的每一个属性都有一个 <code class=\\\"language-text\\\">Dep</code> 实例，其 <code class=\\\"language-text\\\">Dep#subs</code> 记录了依赖于这个属性的 <code class=\\\"language-text\\\">watcher</code>，每当这个属性被重新赋值的时候，会通过调用 <code class=\\\"language-text\\\">Dep#notify</code> 来通知 <code class=\\\"language-text\\\">Watcher</code> 该属性改变了。另外，当使用相同值重复设置属性的时候，不会去触发通知。</p>\\n<p>先贴一下所有代码：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Dep</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">addSub</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">includes</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">notify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>subs<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>sub <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      sub<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">fn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nDep<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">pushTarget</span><span class=\\\"token punctuation\\\">(</span>watcher<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  Dep<span class=\\\"token punctuation\\\">.</span>target <span class=\\\"token operator\\\">=</span> watcher\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Observer</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">walk</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> keys <span class=\\\"token operator\\\">=</span> Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> keys<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> key <span class=\\\"token operator\\\">=</span> keys<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token keyword\\\">let</span> val <span class=\\\"token operator\\\">=</span> data<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span>\\n      <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>val<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">const</span> dep <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Dep</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n      Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          dep<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addSub</span><span class=\\\"token punctuation\\\">(</span>Dep<span class=\\\"token punctuation\\\">.</span>target<span class=\\\"token punctuation\\\">)</span>\\n          <span class=\\\"token keyword\\\">return</span> val\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>newVal <span class=\\\"token operator\\\">===</span> val<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span>\\n          <span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>newVal<span class=\\\"token punctuation\\\">)</span>\\n          dep<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">notify</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n          val <span class=\\\"token operator\\\">=</span> newVal\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!==</span> <span class=\\\"token string\\\">'[object Object]'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Observer</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Watcher</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> exp<span class=\\\"token punctuation\\\">,</span> fn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>exp <span class=\\\"token operator\\\">=</span> exp\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>fn <span class=\\\"token operator\\\">=</span> fn\\n    <span class=\\\"token function\\\">pushTarget</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n    data<span class=\\\"token punctuation\\\">[</span>exp<span class=\\\"token punctuation\\\">]</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>用刚才上面提到的代码测试一下：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> data <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span>\\n  obj<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    key1<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key1'</span><span class=\\\"token punctuation\\\">,</span>\\n    key2<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'key2'</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">observe</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Watcher</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'data.a changed'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n\\ndata<span class=\\\"token punctuation\\\">.</span>a <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">'a_change'</span>\\n<span class=\\\"token comment\\\">// 控制台输出：</span>\\n<span class=\\\"token comment\\\">// data.a changed</span></code></pre>\\n      </div>\\n<p>好了，以上就是在 Vue 中，响应式数据的一个大概原理了，当然，很多细节没有照顾到，而 Vue 的具体实现跟上面所说的也有所不同，Vue 的实现会复杂许多，比如上面的实现 <code class=\\\"language-text\\\">Dep#notify</code> 是直接调用 <code class=\\\"language-text\\\">fn</code>，但在 Vue 中，有一个 <code class=\\\"language-text\\\">Wathcer#update</code> 方法，<code class=\\\"language-text\\\">Dep#notify</code> 实际上调用的是这个方法，如在 <code class=\\\"language-text\\\">Watcher</code> 实例中设置的函数可以获取值的新值跟旧值，大家可以自行尝试实现，等等等等，大家可以参考 <code class=\\\"language-text\\\">Vue</code> 中 <code class=\\\"language-text\\\">Watcher</code> 具体的 API，我就不再一一赘述了，因为这篇文章着重讲的是一个实现原理。</p>\",\"frontmatter\":{\"title\":\"Reactivity\",\"date\":\"September 08, 2017\",\"tags\":[\"JavaScript\",\"前端\"]},\"fields\":{\"slug\":\"/reactive-data/\"}}},\"pathContext\":{\"slug\":\"/reactive-data/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-reactive-data.json\n// module id = 520\n// module chunks = 162625417449081"],"sourceRoot":""}