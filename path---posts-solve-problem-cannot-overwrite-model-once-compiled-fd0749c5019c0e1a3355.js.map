{"version":3,"sources":["webpack:///path---posts-solve-problem-cannot-overwrite-model-once-compiled-fd0749c5019c0e1a3355.js","webpack:///./.cache/json/posts-solve-problem-cannot-overwrite-model-once-compiled.json"],"names":["webpackJsonp","528","module","exports","data","markdownRemark","html","frontmatter","title","date","tags","fields","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,qrGAAkuGC,aAA6FC,MAAA,gDAAAC,KAAA,mBAAAC,MAAA,4DAAqJC,QAAWC,KAAA,0DAAgEC,aAAgBD,KAAA","file":"path---posts-solve-problem-cannot-overwrite-model-once-compiled-fd0749c5019c0e1a3355.js","sourcesContent":["webpackJsonp([230217107413137],{\n\n/***/ 528:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>之前使用了 <a href=\\\"https://github.com/wssgcg1213/koa2-react-isomorphic-boilerplate\\\">koa2-react-isomorphic-boilerplate</a> 作为编写前后端同构应用，但是使用这个 boilerplate 的时候出现了一个问题：我使用了一个库 <code class=\\\"language-text\\\">mongoose</code>，每次在 <code class=\\\"language-text\\\">development</code> 模式下修改代码的时候就会抛出错误，错误原因就是 <code class=\\\"language-text\\\">Cannot overwrite model once compiled.</code>，然后只能自己重启服务器。</p>\\n<p>然后就就想着要不就修改代码之后重启服务器吧。之后又参考了几个前后端同构的 boilerplate，自己写了个 boilerplate，大概就是服务器端代码修改时候自动重启，客户端代码修改进行热替换。然而，这带来的一个问题是客户端代码修改之后，当刷新页面时候服务端返回的html与客户端生成的是不一致的，在这个 <a href=\\\"https://github.com/chikara-chan/react-isomorphic-boilerplate/issues/1#issuecomment-270562613\\\">issue</a> 中我有提到。接着我突然想到，<a href=\\\"https://github.com/wssgcg1213/koa2-react-isomorphic-boilerplate\\\">koa2-react-isomorphic-boilerplate</a> 是可以在客户端代码修改后也修改服务器端返回的代码的，具体实现就是通过清除 <code class=\\\"language-text\\\">require</code> 缓存，至于为什么 <code class=\\\"language-text\\\">mongoose</code> 会报这个重复定义的错呢，我再次查阅了一些资料，发现 <code class=\\\"language-text\\\">mongoose</code> 会缓存 <code class=\\\"language-text\\\">model</code> 和 <code class=\\\"language-text\\\">modelSchema</code> 在 <code class=\\\"language-text\\\">mongoose.models</code> 和 <code class=\\\"language-text\\\">mongoose.modelSchemas</code> 上面，当清除 <code class=\\\"language-text\\\">require</code> 的缓存之后，<code class=\\\"language-text\\\">mongoose.models</code> 里面的东西还在，然后再次 <code class=\\\"language-text\\\">require</code> 模型的时候就报错了。</p>\\n<p>因此，我通过在监听文件变动的代码里再加上下面的代码来清除 <code class=\\\"language-text\\\">mongoose</code> 中的缓存，成功地解决了这个问题：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>mongoose<span class=\\\"token punctuation\\\">.</span>models<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>model<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">delete</span> mongoose<span class=\\\"token punctuation\\\">.</span>models<span class=\\\"token punctuation\\\">[</span>model<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>mongoose<span class=\\\"token punctuation\\\">.</span>modelSchemas<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>schema<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">delete</span> mongoose<span class=\\\"token punctuation\\\">.</span>modelSchemas<span class=\\\"token punctuation\\\">[</span>schema<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"mongoose Cannot overwrite model once compiled\",\"date\":\"January 05, 2017\",\"tags\":[\"mongoose\",\"mongodb\",\"JavaScript\",\"chokidar\",\"isomorphic\"]},\"fields\":{\"slug\":\"/solve-problem-cannot-overwrite-model-once-compiled/\"}}},\"pathContext\":{\"slug\":\"/solve-problem-cannot-overwrite-model-once-compiled/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-solve-problem-cannot-overwrite-model-once-compiled-fd0749c5019c0e1a3355.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>之前使用了 <a href=\\\"https://github.com/wssgcg1213/koa2-react-isomorphic-boilerplate\\\">koa2-react-isomorphic-boilerplate</a> 作为编写前后端同构应用，但是使用这个 boilerplate 的时候出现了一个问题：我使用了一个库 <code class=\\\"language-text\\\">mongoose</code>，每次在 <code class=\\\"language-text\\\">development</code> 模式下修改代码的时候就会抛出错误，错误原因就是 <code class=\\\"language-text\\\">Cannot overwrite model once compiled.</code>，然后只能自己重启服务器。</p>\\n<p>然后就就想着要不就修改代码之后重启服务器吧。之后又参考了几个前后端同构的 boilerplate，自己写了个 boilerplate，大概就是服务器端代码修改时候自动重启，客户端代码修改进行热替换。然而，这带来的一个问题是客户端代码修改之后，当刷新页面时候服务端返回的html与客户端生成的是不一致的，在这个 <a href=\\\"https://github.com/chikara-chan/react-isomorphic-boilerplate/issues/1#issuecomment-270562613\\\">issue</a> 中我有提到。接着我突然想到，<a href=\\\"https://github.com/wssgcg1213/koa2-react-isomorphic-boilerplate\\\">koa2-react-isomorphic-boilerplate</a> 是可以在客户端代码修改后也修改服务器端返回的代码的，具体实现就是通过清除 <code class=\\\"language-text\\\">require</code> 缓存，至于为什么 <code class=\\\"language-text\\\">mongoose</code> 会报这个重复定义的错呢，我再次查阅了一些资料，发现 <code class=\\\"language-text\\\">mongoose</code> 会缓存 <code class=\\\"language-text\\\">model</code> 和 <code class=\\\"language-text\\\">modelSchema</code> 在 <code class=\\\"language-text\\\">mongoose.models</code> 和 <code class=\\\"language-text\\\">mongoose.modelSchemas</code> 上面，当清除 <code class=\\\"language-text\\\">require</code> 的缓存之后，<code class=\\\"language-text\\\">mongoose.models</code> 里面的东西还在，然后再次 <code class=\\\"language-text\\\">require</code> 模型的时候就报错了。</p>\\n<p>因此，我通过在监听文件变动的代码里再加上下面的代码来清除 <code class=\\\"language-text\\\">mongoose</code> 中的缓存，成功地解决了这个问题：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>mongoose<span class=\\\"token punctuation\\\">.</span>models<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>model<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">delete</span> mongoose<span class=\\\"token punctuation\\\">.</span>models<span class=\\\"token punctuation\\\">[</span>model<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>mongoose<span class=\\\"token punctuation\\\">.</span>modelSchemas<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>schema<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">delete</span> mongoose<span class=\\\"token punctuation\\\">.</span>modelSchemas<span class=\\\"token punctuation\\\">[</span>schema<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"mongoose Cannot overwrite model once compiled\",\"date\":\"January 05, 2017\",\"tags\":[\"mongoose\",\"mongodb\",\"JavaScript\",\"chokidar\",\"isomorphic\"]},\"fields\":{\"slug\":\"/solve-problem-cannot-overwrite-model-once-compiled/\"}}},\"pathContext\":{\"slug\":\"/solve-problem-cannot-overwrite-model-once-compiled/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-solve-problem-cannot-overwrite-model-once-compiled.json\n// module id = 528\n// module chunks = 230217107413137"],"sourceRoot":""}