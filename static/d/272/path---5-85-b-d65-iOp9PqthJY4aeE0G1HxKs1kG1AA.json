{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"7c44b34e-83c5-5e7a-b4bd-4c9faae756ca","timeToRead":2,"frontmatter":{"title":"React 动画","date":"Aug 31, 2016","tags":["前端","JavaScript","React"]},"fields":{"slug":"/posts/react-animation/"},"excerpt":"<p><code class=\"language-text\">React.js</code> 提供了两个附加组件方便我们定义动画，分别为 <code class=\"language-text\">ReactTransitionGroup</code> 和 <code class=\"language-text\">ReactCSSTransitionGroup</code>。<code class=\"language-text\">ReactTransitionGroup</code> 是低层次的 API，<code class=\"language-text\">ReactCSSTransitionGoup</code> 是高层次的 API （做了进一步的封装，使用上更加方便但也相应的没有那么灵活）。</p>\n<!-- more -->\n<h2>ReactCSSTransitionGroup</h2>\n<p>使用该组件定义动画十分方便，将需要进行动画的组件由 <code class=\"language-text\">ReactCSSTransitionGroup</code> 包括起来，并定义相关的属性即可。</p>"}},{"node":{"id":"b55a85ed-4897-5b71-a75d-40e62f10e166","timeToRead":1,"frontmatter":{"title":"apply, call 与 bind","date":"Aug 25, 2016","tags":["学习笔记","前端","JavaScript"]},"fields":{"slug":"/posts/apply-call-and-bind/"},"excerpt":"<p>这三个函数都与改变函数执行时的上下文有关。其又分为两类：</p>\n<ol>\n<li><code class=\"language-text\">Function.prototype.apply</code> 与 <code class=\"language-text\">Function.prototype.call</code> 为一类。它们会立即调用函数。</li>\n<li><code class=\"language-text\">Function.prototype.bind</code>  为一类，其会返回一个绑定了作用域的函数而不立即被调用。</li>\n</ol>\n<h2>Function.prototype.apply</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>argsArray<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">apply</code> 接收两个参数第一个是要绑定给 <code class=\"language-text\">this</code> 的值，第二个是参数数组（array-like object）。</p>"}},{"node":{"id":"e48ca73c-30f3-577d-9e5b-62783e56389a","timeToRead":3,"frontmatter":{"title":"Promise","date":"Aug 21, 2016","tags":["前端","JavaScript"]},"fields":{"slug":"/posts/promise/"},"excerpt":"<h2>什么是 Promise</h2>\n<blockquote>\n<p>Promise是抽象异步处理对象以及对其进行各种操作的组件。</p>\n</blockquote>\n<p>使用 Promise 可以有效的避免写多个层次的回调函数。</p>\n<h2>初体验</h2>\n<p>首先看一下使用回调函数进行异步操作的写法。</p>\n<p><code class=\"language-text\">getSomethingFromNetwork</code> 是一个虚构的函数，其功能是异步从网络中获取内容。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">getSomethingFromNetwork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> resp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理错误</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// 对获取的结果进行进一步的处理</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>那用 Promise 会怎么写呢？</p>"}},{"node":{"id":"f1a4d4e6-2bc0-56cf-bb34-a89de18087ff","timeToRead":1,"frontmatter":{"title":"CSS 小知识（一）","date":"Aug 20, 2016","tags":["前端","开发","CSS"]},"fields":{"slug":"/posts/css-tips/"},"excerpt":"<h1>px，em 与 rem</h1>\n<p><code class=\"language-text\">px</code> 相对于显示器分辨率而言。</p>\n<p><code class=\"language-text\">em</code> 是相对长度单位，相当于当前对象内文本的尺寸。浏览器默认的字体行高是 <code class=\"language-text\">16px</code></p>\n<p><code class=\"language-text\">rem</code>相对于 <code class=\"language-text\">html</code> 根元素 (<code class=\"language-text\">root em</code>)</p>\n<h1>将文本变为不可选中</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-webkit-user-select:none;\n-moz-user-select:none;\n-ms-user-select:none;\nuser-select:none;</code></pre></div>\n<h1>优化字体渲染</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">text-rendering: optimizeLegibility;\n-webkit-font-smoothing: antialiased;\n-moz-osx-font-smoothing: grayscale;</code></pre></div>\n<h1>设置全局字体</h1>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">body {\n    font-family: Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,SimSun,sans-serif;\n}\n\n/** 确保表单元素被设置所需字体 **/\ninput, label, select, option, textarea, button, fieldset, legend {\n    font-family: Helvetica Neue,Helvetica,PingFang SC,Hiragino Sans GB,Microsoft YaHei,SimSun,sans-serif;\n}</code></pre></div>"}},{"node":{"id":"83578263-1b00-5da3-b282-adde4a64bb77","timeToRead":1,"frontmatter":{"title":"使用 css 创建 modal 效果","date":"Aug 14, 2016","tags":["前端","CSS"]},"fields":{"slug":"/posts/modal-with-css/"},"excerpt":"<p>Modal 是网页设计中经常用到的一种效果，来看看如何用CSS实现吧</p>\n<h2>HTML 组织</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.modal\n    .modal-content</code></pre></div>\n<h2>CSS 代码</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.modal {\n    /* 背景色 */\n    background: rgba(0, 0, 0, 0.2);\n    /* 固定 */\n    position: fixed;\n    /* 覆盖整个视口 */\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    height: 100%;\n    /* 保持遮罩在上方 */\n    z-index: 999;\n    /* 当 modal-content 超出视口的时候可以进行滚动*/\n    overflow: auto;\n}\n\n.modal-content {\n    /* modal 的内容 */\n    width: 60%;\n    background-color: #fff;\n    /* 居中 */\n    margin: 50px auto;\n    padding: 16px 32px;\n    position: relative;\n}</code></pre></div>\n<h2>滚动解决</h2>\n<p>这样设置之后，当展现 modal 之后，后方的页面依旧可以滚动，这样用户体验不是很好，可以通过设置 <code class=\"language-text\">body</code> 的 CSS 样式来解决：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 当出现 modal 的时候\ndocument.body.style.overflow = &#39;hidden&#39;\n\n// 当 modal 消失的时候\ndocument.body.style.overflow = &#39;auto&#39;</code></pre></div>"}},{"node":{"id":"d83aada5-94da-55f8-8c0b-af4d5bb00962","timeToRead":3,"frontmatter":{"title":"highcharts 入门","date":"Aug 07, 2016","tags":["前端","学习笔记","图表","JavaScript"]},"fields":{"slug":"/posts/highchart-basic/"},"excerpt":"<h2>基本</h2>\n<p>首先，是使用 HIGHCHARTS 创建一个图表，在引用 <code class=\"language-text\">jQuery</code> 的情况下用如下的方法可以创建一个图表。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$(&#39;#container&#39;).highcharts(config);</code></pre></div>\n<p>其中，<code class=\"language-text\">#container</code> 是一个 <code class=\"language-text\">html</code> 元素，<code class=\"language-text\">config</code> 是该图表的配置，是一个 <code class=\"language-text\">Object</code>，使用 HIGHCHARTS 基本上就是对配置的编写，以下的内容就是介绍 HIGHCHARTS 的各种配置。</p>\n<p>先来看看官方提供的这幅图片，其描述了一个图表所包含的内容，主要就是通过配置这些内容来展现一个图表：</p>"}},{"node":{"id":"1562c0dd-6607-5b46-907d-2b36fecbf739","timeToRead":1,"frontmatter":{"title":"JavaScript？单线程？异步？","date":"Aug 02, 2016","tags":["前端","JavaScript"]},"fields":{"slug":"/posts/javascript-single-thread-and-async/"},"excerpt":"<p>了解 JavaScript 的同学知道 JavaScript 在浏览器下是单线程的，运行 JavaScript 代码的线程只有一个。但是 JavaScript 又有异步的特性，这是怎么回事呢？今天就来说说这方面的内容。</p>\n<p>常见的异步调用有 AJAX，setTimeout之类的，大家要知道，这些都是浏览器提供的API，也就是说，JavaScript的异步特性其实就是因为调用了浏览器提供的接口，实质上，JavaScript还是在一条线程上运行的，浏览器同时执行 setTimeout 的倒计时之类的事…</p>"}},{"node":{"id":"410f750d-7e58-54d1-87a0-c28560029ef2","timeToRead":1,"frontmatter":{"title":"linear-gradient 的方向参数","date":"Aug 01, 2016","tags":["前端","CSS"]},"fields":{"slug":"/posts/linear-gradient-deg/"},"excerpt":"<p>大家知道，<code class=\"language-text\">linear-gradient</code> 有一个方向参数，比如下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">background: linear-gradient(90deg, #fb3 20%, #58a 80%)</code></pre></div>\n<p>那么这个角度是什么意思呢，简单地理解，这个角度指明了渐变的方向。</p>\n<p>这个参数的默认值是 <code class=\"language-text\">180deg</code>。此时渐变方向为从上到下渐变，即 #fb3 （类似黄色）渐变到 #58a(类似蓝色）。</p>\n<p><img src=\"https://i.loli.net/2018/11/17/5befc2143879d.png\" alt=\"渐变效果图\"></p>\n<p>这个参数也可以这么写：</p>\n<ol>\n<li>to top</li>\n<li>to right</li>\n<li>to left</li>\n<li>to bottom</li>\n</ol>"}},{"node":{"id":"c6912e18-109a-5c3f-99a4-33742ccdf3c2","timeToRead":2,"frontmatter":{"title":"Redux 初体验","date":"Jul 22, 2016","tags":["前端","学习笔记","Redux","开发"]},"fields":{"slug":"/posts/learn-redux/"},"excerpt":"<p><img src=\"https://i.loli.net/2018/11/17/5befc20e79926.png\" alt=\"Redux\"></p>\n<p>Redux 是一个可预测的状态容器。最近看了 Redux 作者的入门视频，算是入了个门，顺便写篇文章记录一下。</p>\n<!-- more -->\n<h1>基本思想</h1>\n<p>首先是 action，action 是形如下面形式的 JavaScript 对象：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n\ttype: &#39;ACTION_TYPE&#39;,\n\tinfo: &#39;some information&#39;\n}</code></pre></div>\n<p>其中，type 是必须的，通过 action 可以改变状态。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(oldState, action) =&gt; newState</code></pre></div>\n<p>以上就是一个 reducer 了，输入一个旧的状态与动作，输出一下新的状态。Redux 要求我们不要去修改旧状态。</p>"}},{"node":{"id":"ed3b064f-36c6-5e1e-b646-2fa5d3461869","timeToRead":1,"frontmatter":{"title":"解决 Hexo 出现错误的故事","date":"Jul 21, 2016","tags":["hexo","博客","npm"]},"fields":{"slug":"/posts/solve-hexo-problems/"},"excerpt":"<p>这是一段惨痛的经历，在这段时间中，我真的想哭。这是一个解决 hexo 出现错误的故事，这个故事很长、很长。</p>\n<p>如果大家也发现执行 hexo 命令时出现错误，请直接看本文的总结部分，也许是你想要的答案。</p>\n<p><img src=\"https://i.loli.net/2018/11/17/5befc752d634c.png\" alt=\"install hexo\"></p>\n<!-- more -->\n<h1>正文</h1>\n<p>前段时间升级了一下node，直接升级到了6.2，好久没写博客了，然后随手写了一篇，然后创建博文的时候，突然发现：nani？居然有错误，不可忍啊，虽然操作还是成功了。不过错误必须去除，然后我想，是不是 hexo 的版本太低了，已经更新过了呢。</p>"}}],"pathPrefix":"","first":false,"last":false,"index":5,"pageCount":8,"additionalContext":{}}}