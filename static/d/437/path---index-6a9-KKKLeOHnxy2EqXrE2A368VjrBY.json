{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"948c98b4-8c86-5356-9d43-b95bd2aea78f","timeToRead":1,"frontmatter":{"title":"一场对 Provisional headers are shown 的探索之旅","date":"Apr 12, 2019","tags":["浏览器"]},"fields":{"slug":"/posts/provisional-headers-are-shown/"},"excerpt":"<p>经常使用 Chrome 的 Network 面板会发现，即使是正常成功返回的跨域请求，在 Request Header 一栏还是会显示 <strong>Provisional headers are shown</strong>。</p>\n<p>有诸多原因会导致出现 <strong>Provisional headers are shown</strong> ，比如我看到的这篇文章 <a href=\"http://xxdy.tech/2018/11/30/header/\">provisional headers are shown  知多少</a> 里有说到几种情况，但对于正常的跨域请求来说，显然不在上述文章所列出的几点原因中。</p>"}},{"node":{"id":"307174ef-a3f3-531f-afb9-f47b809d810a","timeToRead":1,"frontmatter":{"title":"对 React setState 的误解","date":"Apr 11, 2019","tags":["前端","JavaScript","React"]},"fields":{"slug":"/posts/a-misunderstanding-of-react-set-state/"},"excerpt":null}},{"node":{"id":"804f35ea-e506-5edc-ab68-75d323b0b2b7","timeToRead":1,"frontmatter":{"title":"一个图片不显示的问题","date":"Nov 12, 2018","tags":["CSS","前端"]},"fields":{"slug":"/posts/img-not-show-problem/"},"excerpt":"<p>今天帮同事看一个图片不显示的问题，情况是在电脑上图片都是正常显示的，但是在 iOS 上发现一些图片显示，一些图片不显示。接到问题的时候对这个问题的描述是没有显示图片的<code class=\"language-text\">img</code>元素没有对应的图片请求，以<code class=\"language-text\">background</code>设置的图片显示都没有问题。这对问题的排查造成了一定的障碍，因为这自然地把问题排查点引向了没有发生这个图片请求的原因。几次试验无果后我仔细看了看无法显示图片的</p>"}},{"node":{"id":"39f864e5-4315-54ee-8f74-0948619aa620","timeToRead":1,"frontmatter":{"title":"TypeScript rootDirs 是怎么工作的","date":"Jun 08, 2018","tags":["TypeScript","配置"]},"fields":{"slug":"/posts/typescript-rootdirs/"},"excerpt":"<p>在 TypeScript 中可以利用 rootDirs 指定虚拟目录，若不了解，可以阅读<a href=\"https://www.typescriptlang.org/docs/handbook/module-resolution.html\">Module Resolution · TypeScript</a>。</p>\n<h2>解析步骤</h2>\n<p>在上面链接的文章中有一个假象的国际化场景，通过配置 <code class=\"language-text\">rootDirs</code>，编译器可以解析并不存在的相对模块导入，配置如下所示，其中，并不存在一个文件夹为 <code class=\"language-text\">src/${locale}</code>。</p>"}},{"node":{"id":"5ef81d8f-113c-50f3-8234-5b8ecbc6014b","timeToRead":1,"frontmatter":{"title":"About Promise.prototype.finally","date":"Mar 04, 2018","tags":["前端","JavaScript"]},"fields":{"slug":"/posts/about-promise-prototype-finally/"},"excerpt":"<p>今天随意浏览，发现 <code class=\"language-text\">Promise.prototype.finally</code> 已经进入到 <code class=\"language-text\">Stage 4</code> 了，顺便记录一下规范中 <code class=\"language-text\">finally</code> 的一些注意点吧。</p>\n<h2>使用方法</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">666</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reason'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>注意点</h2>\n<p>1、 <code class=\"language-text\">finally</code> 中的回调函数不接受任何参数</p>\n<p>2、在调用了 <code class=\"language-text\">finally</code> 之后返回的仍然是一个 <code class=\"language-text\">Promise</code>，它会将前面操作 <code class=\"language-text\">resolved</code> 或者 <code class=\"language-text\">rejected</code> 的值作为这个新返回的 <code class=\"language-text\">Promise</code> 将会 <code class=\"language-text\">resolved</code> 或者 <code class=\"language-text\">rejected</code> 的值，但是，如果在 <code class=\"language-text\">finally</code> 中 <code class=\"language-text\">throw</code> 或者返回一个将会 <code class=\"language-text\">rejected</code> 的 <code class=\"language-text\">Promise</code>，那么，新返回的 <code class=\"language-text\">Promise</code> 将会被在 <code class=\"language-text\">finally</code> 中 <code class=\"language-text\">throw</code> 或者返回的 <code class=\"language-text\">Promise</code> reject 掉的值 reject 掉。</p>"}},{"node":{"id":"6cfa10e5-f4f1-5215-a79b-6b9a97a08c0e","timeToRead":1,"frontmatter":{"title":"前端错误小知识","date":"Nov 03, 2017","tags":["前端","JavaScript"]},"fields":{"slug":"/posts/about-front-end-error/"},"excerpt":"<h2>window.onerror</h2>\n<p><code class=\"language-text\">window.onerror</code> 是顶层的错误处理函数，大部分抛出的未被处理的错误可以在这里进行统一处理。如下所示：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">,</span> col<span class=\"token punctuation\">,</span> error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 处理各种事情，如错误上报</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>另外，如果在函数中 <code class=\"language-text\">return true</code> 的话，错误不会继续向上抛出，也就是不会再浏览器控制台出现 <code class=\"language-text\">Uncaught Error</code> 这些提示。</p>\n<p>当然，<code class=\"language-text\">window.onerror</code> 不是万能灵药，有如下限制：</p>\n<ol>\n<li>Promise 抛出的错误无法处理</li>\n<li>跨域脚本中的错误会直接显示成 <code class=\"language-text\">Script Error</code>，这样一来无法定位错误</li>\n<li>比如说在 HTML 中请求一个不存在的资源，如 <code class=\"language-text\">&lt;img src=&quot;./404.png&quot;&gt;</code>，这也是一个错误，不过 <code class=\"language-text\">window.onerror</code> 也是不能处理到的。</li>\n</ol>"}},{"node":{"id":"06aaefeb-0e4d-5f9b-bf8e-fcd8a53af3a4","timeToRead":1,"frontmatter":{"title":"使用 Whistle 对 iOS HTTPS 进行抓包","date":"Sep 20, 2017","tags":["抓包","网络","Web"]},"fields":{"slug":"/posts/https-proxy-on-ios/"},"excerpt":"<p><a href=\"https://github.com/avwo/whistle\">Whistle</a> 是一款 Web Debugging Proxy，类似的工具还有 Fiddler，Charles。不过，Fiddler 在 macOS 上不尽完美（我没有开启成功过，不知道什么情况），Charles 则是收费的。而 Fiddler 作为一款免费的开源软件，也能够满足开发中调试的…</p>"}},{"node":{"id":"f8e66446-b0da-531f-8fee-c836100e7ca7","timeToRead":1,"frontmatter":{"title":"Linux 用户管理（一）","date":"Sep 18, 2017","tags":["Linux"]},"fields":{"slug":"/posts/user-and-group-in-linux/"},"excerpt":"<p>讲讲 Linux 中用户以及用户组相关的一些知识吧。</p>\n<h2>用户</h2>\n<p>首先介绍一个一个文件：<code class=\"language-text\">/etc/passwd</code>，这个文件中存储了一下与用户相关的信息，举个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ grep /etc/passwd\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nubuntu:x:500:500:ubuntu,,,:/home/ubuntu:/bin/zsh</code></pre></div>\n<p>内容大概是上面这个样子的，在行数上我做了一些删减，可以看到每一行都代表了一个用户，我们看看每一行的含义，以第一行为例吧。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root:x:0:0:root:/root:/bin/bash\n 1   2 3 4   5    6      7</code></pre></div>\n<p>可以看到常见的一行用户信息包含七个部分（由 <code class=\"language-text\">:</code> 分割），下面分别解释一下每一个部分的含义。</p>"}},{"node":{"id":"7aa7ff7c-b0e8-525d-bd6b-5db8f386edf6","timeToRead":3,"frontmatter":{"title":"Reactivity","date":"Sep 08, 2017","tags":["JavaScript","前端"]},"fields":{"slug":"/posts/reactive-data/"},"excerpt":"<p>最近有被问到 Vue 的响应式数据的原理，第一次被问到的时候有点语无伦次的感觉吧。对于一个知识点，看过，然后自己理解一下是一个层次，能够讲出来让别人明白就是另一个层次了。对于源码的阅读，我比较喜欢去明白一些机制的原理，比较理想的情况下是能够在明白源码的原理之后，在不查看源码的情…</p>"}},{"node":{"id":"d5aef066-0109-52e6-97be-43a419b92389","timeToRead":2,"frontmatter":{"title":"Shell Script 基本语法","date":"Aug 27, 2017","tags":["shell script","linux","unix"]},"fields":{"slug":"/posts/shell-script-basic/"},"excerpt":null}}],"pathPrefix":"","first":true,"last":false,"index":1,"pageCount":8,"additionalContext":{}}}