{"pageContext":{"isCreatedByStatefulCreatePages":false,"group":[{"node":{"id":"81a93a11-3ac8-5c16-a13d-330273ff420f","timeToRead":1,"frontmatter":{"title":"变量提升","date":"Oct 19, 2016","tags":["前端","JavaScript"]},"fields":{"slug":"/posts/hoisting/"},"excerpt":"<p>早上看了一下 《你不知道的 JavaScript（上卷）》的第一章，其实很多内容是已经知道的，不过作者从另一个层面讲述了关于作用域的知识。作者从 JavaScript 引擎的编译开始说起，让我对这方面的知识有了更加深入地了解。今天来写一下变量提升，虽然之前已经知道变量提升了，不…</p>"}},{"node":{"id":"c28a8eeb-e423-530b-9c65-2a129ecf8008","timeToRead":1,"frontmatter":{"title":"近期遇到的问题解决","date":"Oct 16, 2016","tags":["Eclipse","MySQL"]},"fields":{"slug":"/posts/recent-problem/"},"excerpt":"<p>之前重装过 <code class=\"language-text\">homebrew</code>，又更新过系统，刚才用 <code class=\"language-text\">Eclipse</code> 跑一个项目出现了几个问题，这里是遇到问题的解决方案，供以后遇到问题时候快速查看。</p>\n<p><strong>1. 解决 Eclipse 中无法绑定 tomcat 8.5 的问题</strong></p>\n<p><a href=\"http://stackoverflow.com/questions/37024876/how-to-use-tomcat-8-5-x-and-tomee-7-x-with-eclipse\">How to use Tomcat 8.5.x and TomEE 7.x with Eclipse?</a></p>"}},{"node":{"id":"077f6a2c-dcc8-555c-ad7e-be0886c9a81d","timeToRead":3,"frontmatter":{"title":"CORS 跨域","date":"Oct 14, 2016","tags":["前端","HTTP"]},"fields":{"slug":"/posts/cors/"},"excerpt":"<p>虽然一直知道跨域，但也仅限于知道什么情况下会出现跨域的问题，没有实践过如何实现跨域。最近写代码正好碰到了需要跨域的需求，正好学习一下。实现跨域有很多种方法，常见的有 CORS，JSONP。这里我仅仅是说明如何使用 CORS 进行跨域。</p>\n<h3>请求分类</h3>\n<p>请求分为简单请求和非简单请求，满足以下条件的为简单请求，否则为非简单请求。</p>"}},{"node":{"id":"ec61351f-4e5a-5f01-aab4-0e2e77a87368","timeToRead":1,"frontmatter":{"title":"在终端中使用代理","date":"Oct 01, 2016","tags":["工具","代理","终端","shadowsocks"]},"fields":{"slug":"/posts/proxy-in-terminal/"},"excerpt":"<p>一直使用 <code class=\"language-text\">shadowsocks</code> 翻墙，之前一直以为开了 <code class=\"language-text\">shadowsocks</code> 客户端的全局模式之后终端也是走代理的。近期要升级一下 <code class=\"language-text\">CocoaPods</code>，然后发现终端压根就没走代理，东西根本就没有下载下来。</p>\n<p>寻找了许多方法，最后采用了本文说的办法。</p>\n<h2>下载 ProxyChains-NG</h2>\n<p>首先请确保你安装了 <code class=\"language-text\">homebrew</code>，没安装的话安装一下。</p>\n<p>接着在终端中执行等待安装结束</p>"}},{"node":{"id":"78e2e217-0986-56ee-bb60-b37b135d5036","timeToRead":4,"frontmatter":{"title":"JavaScript 异步验证","date":"Sep 26, 2016","tags":["JavaScript","验证","前端"]},"fields":{"slug":"/posts/async-validator/"},"excerpt":"<p>这几天看了一些开源代码自己重新写了一下表单组件，然后现在想加异步验证组件进来。</p>\n<p>异步验证是表单验证中比较重要的一个功能点，如从服务器获取用户名是否已经被注册等都可以通过一个异步验证模块来处理。</p>\n<p>如何制作一个异步验证模块呢，一开始我并没有什么头绪，开始想着使用 <code class=\"language-text\">Promise</code> 来进行模块的制作，但是对 <code class=\"language-text\">Promise</code> 的使用还是不够自如。然后就看了 <code class=\"language-text\">Ant.Design</code> 中使用的异步验证模块 —— <code class=\"language-text\">async-validator</code>，根据其思路实现了异步验证。在实现了异步验证模块之后，我们可以直接使用其替代原来的验证模块。</p>"}},{"node":{"id":"bc7ed541-db2c-53f2-bc27-cc9df3d6de39","timeToRead":1,"frontmatter":{"title":"React 动画组件实现思路","date":"Sep 22, 2016","tags":["前端","JavaScript","React"]},"fields":{"slug":"/posts/react-animation-component/"},"excerpt":"<p>最近写了一个 React 动画组件，在这里记录一下实现的思路。</p>\n<p>动画组件参考了 React 官方的实现和 React-Component 的 Animate 组件，这两个组件的实现思路大同小异。</p>\n<!-- more -->\n<p>假设这个组件的名称为 <code class=\"language-text\">Animator</code> ，使用形式类似于下面这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Animator</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Item</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        i.name\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Item</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Animator</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>在 <code class=\"language-text\">Animator</code> 包裹后，当新插入 item，删除 item 的时候，会有动画产生。</p>"}},{"node":{"id":"de75fe2b-2797-5372-af6e-ea356ea33617","timeToRead":1,"frontmatter":{"title":"JavaScript 小技巧","date":"Sep 13, 2016","tags":["前端","JavaScript"]},"fields":{"slug":"/posts/javascript-tips/"},"excerpt":"<p>这篇文章记录一些 JavaScript 可能可以用到的小技巧，持续更新。</p>\n<h2>取整（适用于非负数）</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span>number1 <span class=\"token operator\">/</span> number2<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">0</span></code></pre></div>\n<h2>转换为布尔值</h2>\n<p>使用两个逻辑非</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>转换为字符串</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token number\">123</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// \"123\"</span></code></pre></div>\n<h2>理解 const</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\nobj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nobj<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// obj = {a: 1, b: 2}</span></code></pre></div>\n<h2>拷贝数组</h2>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> copyArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"node":{"id":"d6a54f10-4ca0-5d3d-a852-8a35af496e11","timeToRead":1,"frontmatter":{"title":"将 React 组件渲染到 body 上","date":"Sep 10, 2016","tags":["前端","JavaScript","React"]},"fields":{"slug":"/posts/render-component-to-body/"},"excerpt":"<h2>背景</h2>\n<p>一般来说使用编写的 <code class=\"language-text\">React</code> 组件会用一个 <code class=\"language-text\">render</code> 方法，然后整个应用有一个唯一的根元素，但是有时候可能希望有一些例外，比如说编写类似 <code class=\"language-text\">popover</code> 的组件，可能会有一些不方便，如果能将其渲染到 <code class=\"language-text\">body</code> 上则会方便许多。</p>\n<!-- more -->\n<h2>解决方案</h2>\n<p>以下就是一个比较简单的将组件渲染到 <code class=\"language-text\">body</code> 上的组件。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component<span class=\"token punctuation\">,</span> PropTypes <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  children<span class=\"token punctuation\">:</span> PropTypes<span class=\"token punctuation\">.</span>any<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RenderToLayer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>popup <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>popup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">unrenderLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">unrenderLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>popup<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">unmountComponentAtNode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>popup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>popup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>popup <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">renderLayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>popup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nRenderToLayer<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> propTypes<span class=\"token punctuation\">;</span></code></pre></div>\n<p>代码十分简单，该组件的 <code class=\"language-text\">children</code> 属性会被添加到 <code class=\"language-text\">body</code> 后面进行渲染，相信大家都看得懂。使用这种方法的一个缺点就是无法享受到 <code class=\"language-text\">Virtual DOM</code> 带来的好处了，但也得到了很多便利。</p>"}},{"node":{"id":"19373100-1b21-5463-bd1b-50901a6cd9a3","timeToRead":1,"frontmatter":{"title":"JavaScript 中的遍历","date":"Sep 06, 2016","tags":["前端","JavaScript"]},"fields":{"slug":"/posts/iteration-in-javascript/"},"excerpt":"<p><code class=\"language-text\">JavaScript</code> 中的遍历方法可谓是种类繁多，这篇文章总结了 <code class=\"language-text\">JavaScript</code> 中对对象，对数组的各种遍历方法。</p>\n<h2>遍历对象</h2>\n<h3>for…in</h3>\n<p><code class=\"language-text\">for…in</code> 遍历自身的属性和其继承的可枚举的属性</p>\n<h3>Object.keys()</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></code></pre></div>\n<p>遍历自身的可枚举属性</p>\n<h3>Object.getOwnPropertyNames()</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></code></pre></div>\n<p>遍历自身的属性（不包括Symbol）</p>"}},{"node":{"id":"72282240-5fc3-5437-8611-b3cf818ca74e","timeToRead":1,"frontmatter":{"title":"CSS陷阱（一）","date":"Sep 05, 2016","tags":["前端","CSS","React"]},"fields":{"slug":"/posts/css-trip-one/"},"excerpt":"<p>在写自定义的 <code class=\"language-text\">radio</code>，<code class=\"language-text\">checkbox</code> 这些东西的时候遇到了一个坑，在这里记录一下。</p>\n<p><code class=\"language-text\">HTML</code> 的组织是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zc-radio-wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zc-radio<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zc-radio-inner<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n      <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>zc-radio-input<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span>\n      <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">checked</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>on<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>一开始的CSS大概如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.zc-radio-input</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.zc-radio-inner</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 自定义的内容 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后发现滚动条滚到下面的时候，点击自定义的组件会自动滚到最上方。</p>\n<p>一开始我以为是重新渲染所产生的问题，各种排查错误，就是没有发现，最后才发现是忘记给外层元素设置 <code class=\"language-text\">position: relative;</code> 了，导致 <code class=\"language-text\">.zc-radio-input</code> 处在页面的上方，当点击 <code class=\"language-text\">label</code> 的时候就会自动滚到 <code class=\"language-text\">zc-radio-input</code> 处了。</p>"}}],"pathPrefix":"","first":false,"last":false,"index":4,"pageCount":8,"additionalContext":{}}}